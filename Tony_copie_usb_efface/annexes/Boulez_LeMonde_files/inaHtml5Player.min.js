(function($, undefined){

    var InaPlayer = function(element, options){
        this.$element = $(element);
        this.options = $.extend({}, $.fn.inaPlayer.defaults, options);
        this.playerActions = null;
    };
     
    var inaPlayerMethods = {
        mrssSrc: null,
        configurationHTML5: null,
        mediaRules:"",
        adsRules:"",
        socialSharingRules:"",
        warningRules:"",
        timerHiding: null,
        ready: false,
        started: false,
        isPlayingAds: false,
        currentAds: null,
        
        jwplayer: null,

        jwpConfig: {
            fallback: true,
            displaytitle: false,
            analytics: {
                enabled: false,
                cookies: false
            }
        },

        plugins: {},
        
        initialize: function() {
            try
            {
                // initialise la classe OptionsDataClass
                this.options = new OptionsDataClass(this.options);
                
                // charge la config
                this.configurationHTML5 = new ina.player.Config(this.options.host);

                //charge la css
                if (this.options.tintColor) {
                    var link = document.createElement('link');
                    link.type = 'text/css';
                    link.rel = 'stylesheet';
                    link.href = this.options.host + '/player/inaPlayerHtml5.' + this.options.tintColor + '.css';
                    link.async = false ;
                    var head = document.head || document.getElementsByTagName("head")[0] ;
                    head.appendChild(link) ;
                }
                
                this.options.setIdPlayer('i' + Math.random().toString(36).substr(2, 9));
                var embedContainer = $('<div />').attr('id', this.options.getIdPlayer()).width(this.options.getWidth()).height(this.options.getHeight());
                this.$element.prepend(embedContainer);
                this.$element.css('width', this.options.width);
                
                if (UtilsHelperClass.is_empty(this.options.getConfiguration()) === false)
                {
                    // charge, parse et initialise la configuration issu du fichier xml de configuration
                    this.configurations = new ConfigurationDataClass(this.options.configuration);
                    this.configurations.init();
                    
                    // merge les options dans la configuration
                    // A noter : les options ont la prioritée
                    var options = this.options.mergeOptions(this.configurations);

                    if (UtilsHelperClass.is_undefined(options) === false)
                        this.options = options;
                }
                else
                    throw new Error('undefined configuration option or configuration file is not allowed');

                // url du mrss
                if (!this.options.getSrc())
                    throw new Error('url du src invalide');
                
                this.plugins = {};
                
                //charge le player sans passer par l'image
                this.loadPlayer();
                
            }
            catch(error) {
                this.showErrorMessage(this, error.name, error.message, this);
            }

        },
        
        loadPlayer: function(player)
        {
            if (!player) player = this;
            player.mrss = null;
            player.jwpConfig = {};
            try
            {
                if (UtilsHelperClass.is_empty(player.options.getSrc()) === false)
                {
                    player.options.setUseHTML5($.browser.mobile);
                    
                    player.mrss = new MrssDataClass(player.options.getSrc());
                    player.mrss.init();
                    
                    player.playerActions = new playerActionsClass(player);
                    player.playerActions.getRestrictionInfo();
                    
                    player.jwpConfig = $.extend({}, player.jwpConfig, player.configurations.getJwpConfig());
                    
                    if (player.jwpConfig.skin.indexOf("//") === 0)
                    {
                        player.jwpConfig.skin = location.protocol + player.jwpConfig.skin;
                    }
                    if (!UtilsHelperClass.hasFlashPlayerCapability() && !player.options.getUseHTML5() && player.jwpConfig.primary !== "html5") {
                        throw new Error('Flash player was not found in your browser or the version in less than 10, <br /> please install <a href="http://get.adobe.com/fr/flashplayer" target="_blank">newer version</a>. ');
                    }
                    
                    player.jwpConfig = $.extend({}, player.jwpConfig, {
                        width: player.options.width,
                        height: player.options.height,
                        autostart: player.options.autoPlay,
                        ga: {
                            idstring: "title",
                            label: "mediaid"
                        }
                    });
                    
                    //cast
                    var castConfig = player.configurations.getJwpCastConfig();
                    if (!UtilsHelperClass.is_empty_object(castConfig)) {
                        player.jwpConfig['cast'] = player.configurations.getJwpCastConfig();
                    }
                    
                    //logo
                    if (player.configurations.getDisplayTitleBar() === 'true')
                    {
                        player.jwpConfig = $.extend({}, player.jwpConfig, {
                            logo: {
                                file: player.jwpConfig.logo,
                                link: player.jwpConfig.logo_url
                            }
                        });
                        delete player.jwpConfig.logo_url;
                    }
                    
                    
                    if (player.mrss.getTypeMedia() === 'playlist' || player.mrss.getTypeMedia() === 'dossier')
                    {
                        //playlists
                        player.plugins.playlist = new slideshowTemplate(player);
                        player.plugins.playlist.init();
                        
                        player.jwpConfig = $.extend({}, player.jwpConfig, {
                            playlist: player.plugins.playlist.items,
                            listbar: "none"
                        });
                    }
                    else
                    {
                        var mediaTitle = player.mrss.getTitle().replace(/\//g, "-");
                        player.jwpConfig = $.extend({}, player.jwpConfig, {
                            file: player.mrss.getMediaFile() + '/' + player.mrss.getNoticeId() + '::' + encodeURIComponent(mediaTitle),
                            type : player.mrss.getMediaFileExtension(),
                            image: player.mrss.getPoster(),
                            mediaid: player.mrss.getNoticeId()
                        });
                        
                        if (player.configurations.getDisplayRelatedMedia() === 'true')
                        {
                            //notices similaires
                            player.jwpConfig = $.extend({}, player.jwpConfig, {
                                related: {
                                  file: player.configurationHTML5.getUrlMrssNoticesSimilaires('MEDIAID', player.configurations.getRelatedMedia()),
                                  onclick: "link",
                                  heading: "Programmes similaires"
                                }
                            });
                        }
                    }
                    
                    // charge le plugin xiti
                    player.$element.inaXitiPlugIn('destroy');
                    player.$element.inaXitiPlugIn('init', player);
                    
                    //pubs
                    if (player.playerActions.isMediaAllowToAds(player.options.getSite(),player.adsRules) && player.playerActions.getCappingIndex() === '0')
                    {
                        player.plugins.adsmanager = new inaAdsManager(player);
                        player.plugins.adsmanager.init();
                        
                        if (player.options.getUseHTML5() && UtilsHelperClass.hasHTML5VideoCapability())
                            player.jwpConfig.advertising = player.plugins.adsmanager.adServersOptions.mobile;
                        else
                            player.jwpConfig.advertising = player.plugins.adsmanager.adServersOptions.standard;
                        
                        //refacto de la conf pub si playlist
                        if ((player.mrss.getTypeMedia() === 'playlist' || player.mrss.getTypeMedia() === 'dossier') && UtilsHelperClass.is_object(player.jwpConfig.advertising) && UtilsHelperClass.is_object(player.jwpConfig.advertising.schedule)) {
                            for (var i in player.jwpConfig.advertising.schedule) {
                                switch (player.jwpConfig.advertising.schedule[i].offset)
                                {
                                    //preroll au début de la 1ere notice de la playlist
                                    case 'pre':
                                        player.plugins.playlist.items[0] = $.extend({}, player.plugins.playlist.items[0], {
                                            adschedule:{
                                                adbreak1: player.jwpConfig.advertising.schedule[i]
                                            }
                                        });
                                        break;
                                        
                                    //endroll à la fin de la dernière notice de la playlist
                                    case 'post':
                                        player.plugins.playlist.items[player.plugins.playlist.items.length-1] = $.extend({}, player.plugins.playlist.items[player.plugins.playlist.items.length-1], {
                                            adschedule:{
                                                adbreak1: player.jwpConfig.advertising.schedule[i]
                                            }
                                        });
                                        break;
                                        
                                    //midroll au milieu de la notice du milieu de la playlist
                                    
                                    //on ne prend en charge les timedoffest
                                }
                            }
                            player.jwpConfig.playlist = player.plugins.playlist.items;
                            player.jwpConfig.advertising.schedule = null;
                        }
                    }
                    else
                        $(player.$element).trigger({type:'xitiplay', action:'capping_ko'}, player.options);
                    
                    if (player.options.getUseHTML5() && UtilsHelperClass.hasHTML5VideoCapability())
                    {
                        player.jwpConfig.primary = "html5";
                    }
                    
                    player.jwpConfig.abouttext = player.mrss.getChannelTitle();
                    player.jwpConfig.aboutlink = player.mrss.getLink();
                    
                    //refacto de la conf de jwplayer dans le cas ou nous sommes en selfhosting
                    var selfhostedJwpPlugin = player.configurations.getJwpPlugins();
                    if (!UtilsHelperClass.is_empty_object(selfhostedJwpPlugin))
                    {
                        if (!player.jwpConfig.hasOwnProperty('plugins')) player.jwpConfig['plugins'] = {};
                        
                        //refacto de la conf notices similaires
                        if (player.jwpConfig.related && selfhostedJwpPlugin.related) {
                            player.jwpConfig.plugins[selfhostedJwpPlugin.related] = player.jwpConfig.related;
                            if (player.jwpConfig.primary === "html5") player.jwpConfig.related = null;
                        }
                    }
//                    console.log(player.jwpConfig);
                    if (!player.options.getAutoplay())
                    {
                        player.jwpConfig.autostart = true;
                        
                        // div conteneur
                        var preVideo = $('<div />');
                        preVideo.addClass(player.configurationHTML5.css.classPreVideo)
                        .css({
                            "position": "relative",
                            "text-align": "center"
                        })
                        .width(player.options.getWidth())
                        .height(player.options.getHeight())
                        .bind("click", player, player.instancePlayer);
                        
                        var playBtn = $('<div />');
                        playBtn.addClass(player.configurationHTML5.css.classPlayOverlay)
                        .bind("click", player, player.instancePlayer);
                        $('#' + player.options.getIdPlayer()).prepend(playBtn);
                        $('#' + player.options.getIdPlayer()).prepend(preVideo);
                        
                        // image
                        var img = $('<img />');
                        img.attr("src", player.options.getPoster()).height(player.options.getHeight());
                        preVideo.prepend(img);
                        
                        //Fix IE8
                        img.removeAttr('width');
                        img.removeAttr('height');
                        
                        this.plugins.info = new infoTemplate(this);
                        this.plugins.info.init();
                    }
                    else
                    {
                        player.instancePlayer({
                            data: player
                        });
                    }
                }
                else
                {
                    throw new Error('undefined mrss or mrss file is not allowed');
                }
            }
            catch(error)
            {
                player.showErrorMessage(player, error.name, error.message);
            }
        },
        
        instancePlayer: function (e)
        {
            var player = e.data;
            player.jwplayer = jwplayer(player.options.getIdPlayer()).setup(player.jwpConfig);

            player.jwplayer
            .onReady(function(){
                player.onReadyRequested(player);
            })
            .onControls(function(controls){
                player.onControlsRequested(player, controls);
            })
            .onBuffer(function(oldstate){
                player.onBufferRequested(player, oldstate);
            })
            .onIdle(function(oldstate){
                player.onIdleRequested(player, oldstate);
            })
            .onPlaylistItem(function(elt, pl){
                player.onPlaylistItemRequested(player, elt, pl);
            })
            .onBeforePlay(function(){
                player.onBeforePlayRequested(player);
            })
            .onCast(function(cast){
                player.onCastRequested(player, cast);
            })
            .onPlay(function(oldstate){
                player.onPlayRequested(player, oldstate);
            })
            .onPause(function(oldstate){
                player.onPauseRequested(player, oldstate);
            })
            .onResize(function(size){
                player.onResizeRequested(player, size);
            })
            .onComplete(function(){
                player.onCompleteRequested(player);
            })
            .onTime(function(time){
                player.onTimeRequested(player, time);
            })
            .onAdClick(function(tag){
                player.onAdClickRequested(player, tag);
            })
            .onAdCompanions(function(tag, companions){
                player.onAdCompanionsRequested(player, tag, companions);
            })
            .onAdError(function(tag){
                player.onAdErrorRequested(player, tag);
            })
            .onAdImpression(function(tag){
                player.onAdImpressionRequested(player, tag);
            })
            .onAdTime(function(time){
                player.onAdTimeRequested(player, time);
            })
            .onAdPlay(function(tag){
                player.onAdPlayRequested(player, tag);
            })
            .onAdPause(function(tag){
                player.onAdPauseRequested(player, tag);
            })
            .onAdComplete(function(tag){
                player.onAdCompleteRequested(player, tag);
            })
            .onAdSkipped(function(tag){
                player.onAdSkippedRequested(player, tag);
            });
        },
        
        onPlay: function(event, data)
        {
            var player = event.data;
            if (player.jwplayer.getState() === 'PLAYING') return;
            
            if (UtilsHelperClass.is_undefined(data))
            {
                if (event.isTrigger) {
                    player.jwplayer.play();
                }
            }
        },
        
        onPause: function(event, data)
        {
            var player = event.data;
            if (player.jwplayer.getState() !== 'PLAYING') return;
            
            if (UtilsHelperClass.is_undefined(data))
            {
                var player = event.data;
                player.jwplayer.pause();
            }
        },
        
        reset: function(player)
        {
            var prevMediaId = player.jwplayer.config.mediaid;
            var newMediaId = player.jwplayer.getPlaylistItem().mediaid;
            
            player.started = false;
            player.removePlugins(player);
            
            var mediaMrss = player.options.getSrc().replace(prevMediaId, newMediaId);
            player.options.setSrc(mediaMrss);

            //hard reset
            player.jwplayer.remove();
            player.loadPlayer(player);
        },

        removePlugins: function(player)
        {
            for (var p in player.plugins)
            {
                if (!player.plugins[p]) continue;
                if (typeof(player.plugins[p].remove) === 'function') {
                    player.plugins[p].remove();
                }
            }
            player.plugins = {};
        },

        addPlugins: function(player)
        {
            if (player.jwplayer.renderingMode === "html5")
            {
                var idCible = null;
                for (var p in player.plugins)
                {
                    if (!player.plugins[p]) continue;
                    if (player.plugins[p].hasOwnProperty('insertInPlayerDom') && player.plugins[p].insertInPlayerDom) {
                        switch (typeof(player.plugins[p].insertInPlayerDom)) {
                            case 'boolean' :
                                if (player.plugins[p].insertInPlayerDom) {
                                    idCible = player.options.getIdPlayer();
                                }
                                break;
                            case 'string' :
                                if ($('#' + player.options.getIdPlayer() + '_' + player.plugins[p].insertInPlayerDom)) {
                                    idCible = player.options.getIdPlayer() + '_' + player.plugins[p].insertInPlayerDom;
                                }
                                break;
                        }

                        if (typeof(player.plugins[p].moveTo) === 'function') {
                            player.plugins[p].moveTo(idCible);
                        }
                    }
                }
            }
        },
        
        focus: function (player)
        {
            if (player.jwplayer.renderingMode === "html5")
            {
                player.addPlugins(player);
                $.each(player.plugins, function(){
                    if (typeof(this.focus) === 'function') {
                        this.focus();
                    }
                });
            }
        },
        
        blur: function (player)
        {
            if (player.jwplayer.renderingMode === "html5")
            {
                $.each(player.plugins, function(){
                    if (typeof(this.blur) === 'function') {
                        this.blur();
                    }
                });
            }
        },
        
        hidePlugins: function (player)
        {
            if (player.casting) return;
            $.each(player.plugins, function(){
                if (typeof(this.hide) === 'function') {
                    this.hide();
                }
            });
        },
        
        showPlugins: function (player)
        {
            $.each(player.plugins, function(){
                if (typeof(this.show) === 'function') {
                    this.show();
                }
            });
        },
        
        bindHidingEvent: function(player)
        {
            if (player.casting) return;
            if (player.jwplayer.getRenderingMode() === 'html5') return;
            
            player.hidePlugins(player);
            player.$element.mousemove(function(e){
                clearTimeout(player.timerHiding);
                if (!player.isPlayingAds) player.showPlugins(player);
                
                var hidingDuration = (player.jwplayer.getState() === 'PLAYING' && player.started) ? 2000 : 200;
                player.timerHiding = setTimeout(function(){
                    if (player.isPlayingAds || player.jwplayer.getState() !== 'PLAYING' || !player.started) return;
                    player.hidePlugins(player);
                }, hidingDuration);
            });
            player.$element.mouseleave(function(){
                player.hidePlugins(player);
            });
        },
        
        unbindHidingEvent: function(player)
        {
            if (player.jwplayer.getRenderingMode() === 'html5') return;
            if (!player.isPlayingAds) player.showPlugins(player);
            player.$element.unbind('touchstart mousemove mouseleave');
        },
        
        onReadyRequested: function(player)
        {
            setTimeout(function(){
                //creation de la playlist
                if (player.plugins.playlist) {
                    player.plugins.playlist.create();
                }
                
                //info notice
                player.plugins.info = new infoTemplate(player);
                player.plugins.info.init();

                //boutons de partage
                if (player.configurations.getDisplayShare() === 'true')
                {
                    player.plugins.sharing = new sharingTemplate(player);
                    player.plugins.sharing.init();
                }
                
                //teasing | premium
                player.plugins.pushPremium = new pushPremiumTemplate(player);
                player.plugins.pushPremium.init();

                player.jwplayer.removeButton("related");
                
                player.ready = true;
            }, 100);
        },

        onTimeRequested: function(player, time)
        {
        },

        onPlaylistItemRequested: function(player, elt, pl)
        {
            if (player.plugins.playlist) {
                player.plugins.playlist.setCurrentItem(player, elt, pl);
                player.mrss.setIndexCurrentNotice(elt.index);
                player.$element.inaXitiPlugIn('destroy');
                player.$element.inaXitiPlugIn('init', player);
            }
        },
        
        onVideoPlaylistChange: function(idx, player)
        {
            idx = parseInt(idx);
            if (idx !== player.mrss.getIndexCurrentNotice())
            {
                player.mrss.setIndexCurrentNotice(idx);
                
                if (player.plugins.info) {
                    player.plugins.info.init();
                }
                
                if (player.plugins.sharing) {
                    player.plugins.sharing.init();
                }
                
                player.jwplayer.playlistItem(idx);
                
                return true;
            } else {return false;}
        },

        onResizeRequested: function(player, size)
        {
            player.configurationHTML5.general.marginUiControlBar = (player.castAvailable && !player.casting) ? player.configurationHTML5.general.marginUiControlBarCastEnable : player.configurationHTML5.general.marginUiControlBarCastDisable;
            if (!size) {
                size = {
                    width: (player.jwplayer.getFullscreen()) ? screen.width : player.jwplayer.getWidth(),
                    height: (player.jwplayer.getFullscreen()) ? screen.height : player.jwplayer.getHeight()
                };
            }
            player.$element.css({
                width: size.width + "px",
                height: size.height + "px"
            });
            $.each(player.plugins, function(){
                if (typeof(this.resize) === 'function') {
                    this.resize(player, size);
                }
            });
        },

        onPauseRequested: function(player, oldstate)
        {
            player.unbindHidingEvent(player);
            if (player.started) $(player.$element).trigger('xitipause', player.options);
            player.started = true;
        },
        
        onPlayRequested: function(player, oldstate)
        {
            player.bindHidingEvent(player);
            if (!player.started)
            {
                player.addPlugins(player);
                $.each(player.plugins, function(){
                    if (typeof(this.contentStart) === 'function') {
                        this.contentStart();
                    }
                });
                
                //empeche la lecture auto de la notice suivante en mode playlist si playlistAutoPlay = false
                if (player.plugins.playlist && !player.started && !player.options.playlistAutoPlay)
                {
                    setTimeout(function() {
                        player.jwplayer.pause();
                    }, 200);
                    return;
                }
                
                if (player.jwplayer.renderingMode === "html5")
                {
                    //ajoute un evement lors du focus de l'onglet ou de la page
                    var notIE = (document.documentMode === undefined),
                        isChromium = window.chrome;

                    if (notIE && !isChromium)
                    {

                        // checks for Firefox and other  NON IE Chrome versions
                        $(window).on("focusin", function () {
                            player.focus(player);
                        }).on("focusout", function () {
                            player.blur(player);
                        });
                    }
                    else
                    {
                        // checks for IE and Chromium versions
                        if (window.addEventListener) {

                            // bind focus event
                            window.addEventListener("focus", function (event) {
                                player.focus(player);
                            }, false);

                            // bind blur event
                            window.addEventListener("blur", function (event) {
                                player.blur(player);
                            }, false);
                        }
                        else
                        {

                            // bind focus event
                            window.attachEvent("focus", function (event) {
                                player.focus(player);
                            });

                            // bind focus event
                            window.attachEvent("blur", function (event) {
                                player.blur(player);
                            });
                        }
                    }
                }
            }
            
            player.started = true;
            player.onResizeRequested(player);
            $(player.$element).trigger('onPlayMedia', player.options);
            $(player.$element).trigger('xitiplay', player.options);
        },

        onBeforePlayRequested: function(player)
        {
            if (player.plugins.playlist === undefined) {
                //reset si changement de notice
                if (player.jwplayer.config.mediaid !== player.jwplayer.getPlaylistItem().mediaid)
                {
                    player.reset(player);
                }
            }
        },

        onCompleteRequested: function(player)
        {
            player.unbindHidingEvent(player);
            $.each(player.plugins, function(){
                if (typeof(this.contentEnd) === 'function') {
                    this.contentEnd();
                }
            });
            player.started = false;
            $(player.$element).trigger('xitiend', player.options);
        },
        
        onCastRequested: function(player, cast)
        {
            player.casting = cast.active;
            if (player.casting)
            {
                player.showPlugins(player);
                player.unbindHidingEvent(player);
            }
            else
            {
                player.showPlugins(player);
                player.bindHidingEvent(player);
            }
            player.onResizeRequested(player);
        },
        
        onAdClickRequested: function(player, tag)
        {
            $(player.$element).trigger({type:'xitiplay', action:'adclick'}, player.options);
        },
        
        onAdCompanionsRequested: function(player, tag, companions)
        {
        },
        
        onAdErrorRequested: function(player, tag)
        {
            var act = 'error_' + tag.client + '_' + tag.code;
            $(player.$element).trigger({type:'xitiplay', action:act}, player.options);
        },
        
        onAdImpressionRequested: function(player, tag)
        {
            var act = 'roll';
            if (UtilsHelperClass.is_undefined(tag.adposition)) {
                if (player.jwplayer.getPosition() === 0) {
                    act = 'preroll';
                } else if (player.jwplayer.getPosition() >= player.jwplayer.getDuration()-2) {
                    act = 'postroll';
                } else {
                    act = 'midroll';
                }
            } else {
                act = tag.adposition + 'roll'; 
            }
            player.currentAds = act;
            
            $(player.$element).trigger({type:'xitiplay', action:act}, player.options);
        },
        
        onAdTimeRequested: function(player, time)
        {
        },
        
        onAdPlayRequested: function(player, tag)
        {
            player.hidePlugins(player);
            player.isPlayingAds = true;
            
            $.each(player.plugins, function(){
                if (typeof(this.adPlay) === 'function') {
                    this.adPlay();
                }
            });
        },
        
        onAdPauseRequested: function(player, tag)
        {
            $.each(player.plugins, function(){
                if (typeof(this.adPause) === 'function') {
                    this.adPause();
                }
            });
        },

        onAdCompleteRequested: function(player, tag)
        {
            player.isPlayingAds = false;
            if (player.jwplayer.getState() === 'IDLE' && (player.currentAds === 'postroll' || player.currentAds === 'roll')) {
                $.each(player.plugins, function(){
                    if (typeof(this.contentEnd) === 'function') {
                        this.contentEnd();
                    }
                });
            }
            else if (player.jwplayer.getState() === 'PLAYING' && player.started && player.currentAds !== 'postroll') {
                $.each(player.plugins, function(){
                    if (typeof(this.contentStart) === 'function') {
                        this.contentStart();
                    }
                });
            }
            player.started = false;
            player.currentAds = null;
        },

        onAdSkippedRequested: function(player, tag)
        {
            player.onAdCompleteRequested(player, tag);
        },
        
        onControlsRequested: function(player, controls)
        {
        },

        onIdleRequested: function(player, oldstate)
        {
        },

        onBufferRequested: function(player, oldstate)
        {
        },
        
        showErrorMessage: function (player, code, msg)
        {
            if (!player) player = this;
            if (code === undefined || code === "")
                    code = 'n/a';
            if (msg !== undefined || msg !== "")
            {
                if (player.$element.find('.' + player.configurationHTML5.css.classPlayerError).length === 0)
                {
                        var div = $('<div />');
                        var width = 0;
                        var height = 0;
                        if (player.options instanceof OptionsDataClass)
                        {
                            width = player.options.getWidth();
                            height = player.options.getHeight();
                        }
                        div.addClass(player.configurationHTML5.css.classPlayerError).css({
                            'width': width, 
                            'height': height,
                            'display': 'block'
                        });
                        player.$element.empty();
                        player.$element.prepend(div);
                        var span = $('<span />');
                        div.append(span);
                }
                var errorOverlay = player.$element.find('.' + player.configurationHTML5.css.classPlayerError+' > span');
                errorOverlay.empty().html('[' + code + '] ' + msg);
                //errorOverlay.parent().show();
                errorOverlay.show();
            }
            player.removePlugins(player);
        },
        
        /**
        * CHROMECAST SUPPORT
        */
        castAvailable: false,
        casting: false,
        castInitializeCastApi: function(e) {
            e.data.castAvailable = e.loaded;
        },
        
        /**
        * APIJS
        */
        playMedia: function()
        {
            try
            {
                if(typeof this != 'undefined')
                {
                    if(this.jwplayer && typeof this.jwplayer != 'undefined')
                    {
                        this.jwplayer.play();
                    }
                    else if(!this.ready && $('div.' + this.configurationHTML5.css.classPreVideo))
                    {
                        this.jwpConfig.autostart = true;
                        this.instancePlayer({
                            data: this
                        });
                    }
                }
                return true;
            }
            catch(e)
            {
                return false;
            }	    	    
        },

        pauseMedia: function()
        {
            try
            {
                if(typeof this != 'undefined')
                {
                    if(this.jwplayer && typeof this.jwplayer != 'undefined')
                    {
                        this.jwplayer.pause();
                    }
                } 
                return true;
            }
            catch(e)
            {
                return false;
            }	
        },

        stopMedia: function()
        {
            try
            {
                if(typeof this != 'undefined')
                {
                    if(this.jwplayer && typeof this.jwplayer != 'undefined')
                    {
                        this.jwplayer.stop();
                    }
                }
                return true;
            }
            catch(e)
            {
                return false;
            }
        },

        muted: function()
        {
            try
            {
                if(typeof this != 'undefined')
                {
                    if(this.jwplayer && typeof this.jwplayer != 'undefined')
                    {
                        if(this.jwplayer.getMute())
                        {
                            this.jwplayer.setMute(false);
                        }
                        else
                        {
                            this.jwplayer.setMute(true);
                        }
                    }
                }
                return true;
            }
            catch(e)
            {
                return false;
            }
        },

        setVolume: function(volume)
        {
            volume = parseInt(volume);
            if (volume < 0) volume = 0;
            if (volume > 100) volume = 100;
            try
            {
                if(typeof this != 'undefined')
                {
                    if(this.jwplayer && typeof this.jwplayer != 'undefined')
                    {
                        this.jwplayer.setVolume(volume);
                    }		
                } 
                return true;
            }
            catch(e)
            {
                return false;
            }
        },

        getVolume: function()
        {
            try
            {
                if(typeof this != 'undefined')
                {
                    if(this.jwplayer && typeof this.jwplayer != 'undefined')
                    {
                        return this.jwplayer.getVolume();
                    }
                }
                return false;
            }
            catch(e)
            {
                return false;
            }
        },

        time: function()
        {
            try
            {
                if(typeof this != 'undefined')
                {
                    if(this.jwplayer && typeof this.jwplayer != 'undefined')
                    {
                        return this.jwplayer.getPosition();
                    }
                }
            }
            catch(e)
            {
                return false;
            }
        },

        loadSrc: function(src)
        {
            try
            {
                if(typeof this != 'undefined')
                {
                    if(typeof this.options != 'undefined')
                    {
                        this.options.setSrc(src);
                        this.started = false;
                        this.removePlugins(this);

                        //hard reset
                        this.jwplayer.remove();
                        this.loadPlayer(this);
                    }
                }
                return true;
            }
            catch(e)
            {
                return false;
            }
        },

        getMedia:function()
        {
            try
            {
                var data = {};
                if(typeof this != 'undefined')
                {
                    if(this.jwplayer && typeof this.jwplayer != 'undefined')
                    {
                         //Si on est en html 5, on simule le getMedia de flash, mais en ne renvoyant que l'ID pour l'instant
                        data.gid = this.mrss.getNoticeId();
                        return data;
                    }
                }
                return data;
            }
            catch(e)
            {
                return {};
            }
        },

        getPlaylistElement:function()
        {
            try
            {
                var data = {};
                if (typeof this != 'undefined')
                {
                    if (this.jwplayer && typeof this.jwplayer != 'undefined')
                    {
                        //Si on est en html 5, on simule le getMedia de flash, mais en ne renvoyant que l'ID pour l'instant
                        data = this.mrss.getIndexCurrentNotice();
                    }
                }
                return data;
            }
            catch(e)
            {
                return 0;
            }
        },

        setPlaylistElement:function(idx)
        {
            try
            {
                if(typeof this != 'undefined')
                {
                    if(this.jwplayer && typeof this.jwplayer != 'undefined')
                    {
                        this.jwplayer.playlistItem(idx);
                        this.plugins.playlist.gotoCurrent();
                    }
                }
                return true;
            }
            catch(e)
            {
                return false;
            }
        },

        /**
        * setCurrentTime 
        * @param time en sec
        */
        setCurrentTime:function(time)
        {
            try
            {
                if(typeof this != 'undefined')
                {
                    if(this.jwplayer && typeof this.jwplayer != 'undefined')
                    {
                        this.jwplayer.seek(time);
                    }
                }
                return true;
            }
            catch(e)
            {
                return false;
            }
        },

        /**
        * merge les options passées en paramètre aux options courants
        * @param options array options à merger
        * @return bool
        **/
        changeOptions:function(options)
        {
            try
            {
                // pour le moment, seul l'option playlistAutoPlay peut être changée pendant l'execution du player et c'est pas près de changer...
                if(!UtilsHelperClass.is_undefined(options.playlistAutoPlay) && UtilsHelperClass.is_bool(options.playlistAutoPlay))
                {
                    this.options.setPlaylistAutoPlay(Boolean(options.playlistAutoPlay));                                 
                    return true;
                } 
                else
                    return false;
            }
            catch(e)
            {
                return false;
            }	
        }
    };

    InaPlayer.prototype = inaPlayerMethods;
    $.fn.inaPlayer=function(options) {
        
		var player = null;
        this.each(function()
        {
            var inaPlayer = new InaPlayer(this, options);
            inaPlayer.initialize();
            player = inaPlayer;
            
            //ajout des évenements
            $(inaPlayer.$element).bind("onPlayMedia", inaPlayer, inaPlayer.onPlay);
            $(inaPlayer.$element).bind("onPauseMedia", inaPlayer, inaPlayer.onPause);
            $(inaPlayer.$element).bind("inaPlayerOnGCastApiAvailable", inaPlayer, inaPlayer.castInitializeCastApi);
        });
		return player;
    };

    $.fn.inaPlayer.defaults =
    {
        autoPlay: false,
        playlistAutoPlay: true,
        loop: false,
        debug: false,
        poster: ""

    };
})(jQuery);

//forward de l'event detection du chromecast
window['__onGCastApiAvailable'] = function(loaded, errorInfo) {
    $('div[id^=inaPlayer].ina-player').trigger({
        type: "inaPlayerOnGCastApiAvailable",
        loaded: loaded,
        errorInfo: errorInfo
    });
};
/*	SWFObject v2.2 <http://code.google.com/p/swfobject/> 
	is released under the MIT License <http://www.opensource.org/licenses/mit-license.php> 
*/
var swfobject=function(){var D="undefined",r="object",S="Shockwave Flash",W="ShockwaveFlash.ShockwaveFlash",q="application/x-shockwave-flash",R="SWFObjectExprInst",x="onreadystatechange",O=window,j=document,t=navigator,T=false,U=[h],o=[],N=[],I=[],l,Q,E,B,J=false,a=false,n,G,m=true,M=function(){var aa=typeof j.getElementById!=D&&typeof j.getElementsByTagName!=D&&typeof j.createElement!=D,ah=t.userAgent.toLowerCase(),Y=t.platform.toLowerCase(),ae=Y?/win/.test(Y):/win/.test(ah),ac=Y?/mac/.test(Y):/mac/.test(ah),af=/webkit/.test(ah)?parseFloat(ah.replace(/^.*webkit\/(\d+(\.\d+)?).*$/,"$1")):false,X=!+"\v1",ag=[0,0,0],ab=null;if(typeof t.plugins!=D&&typeof t.plugins[S]==r){ab=t.plugins[S].description;if(ab&&!(typeof t.mimeTypes!=D&&t.mimeTypes[q]&&!t.mimeTypes[q].enabledPlugin)){T=true;X=false;ab=ab.replace(/^.*\s+(\S+\s+\S+$)/,"$1");ag[0]=parseInt(ab.replace(/^(.*)\..*$/,"$1"),10);ag[1]=parseInt(ab.replace(/^.*\.(.*)\s.*$/,"$1"),10);ag[2]=/[a-zA-Z]/.test(ab)?parseInt(ab.replace(/^.*[a-zA-Z]+(.*)$/,"$1"),10):0}}else{if(typeof O.ActiveXObject!=D){try{var ad=new ActiveXObject(W);if(ad){ab=ad.GetVariable("$version");if(ab){X=true;ab=ab.split(" ")[1].split(",");ag=[parseInt(ab[0],10),parseInt(ab[1],10),parseInt(ab[2],10)]}}}catch(Z){}}}return{w3:aa,pv:ag,wk:af,ie:X,win:ae,mac:ac}}(),k=function(){if(!M.w3){return}if((typeof j.readyState!=D&&j.readyState=="complete")||(typeof j.readyState==D&&(j.getElementsByTagName("body")[0]||j.body))){f()}if(!J){if(typeof j.addEventListener!=D){j.addEventListener("DOMContentLoaded",f,false)}if(M.ie&&M.win){j.attachEvent(x,function(){if(j.readyState=="complete"){j.detachEvent(x,arguments.callee);f()}});if(O==top){(function(){if(J){return}try{j.documentElement.doScroll("left")}catch(X){setTimeout(arguments.callee,0);return}f()})()}}if(M.wk){(function(){if(J){return}if(!/loaded|complete/.test(j.readyState)){setTimeout(arguments.callee,0);return}f()})()}s(f)}}();function f(){if(J){return}try{var Z=j.getElementsByTagName("body")[0].appendChild(C("span"));Z.parentNode.removeChild(Z)}catch(aa){return}J=true;var X=U.length;for(var Y=0;Y<X;Y++){U[Y]()}}function K(X){if(J){X()}else{U[U.length]=X}}function s(Y){if(typeof O.addEventListener!=D){O.addEventListener("load",Y,false)}else{if(typeof j.addEventListener!=D){j.addEventListener("load",Y,false)}else{if(typeof O.attachEvent!=D){i(O,"onload",Y)}else{if(typeof O.onload=="function"){var X=O.onload;O.onload=function(){X();Y()}}else{O.onload=Y}}}}}function h(){if(T){V()}else{H()}}function V(){var X=j.getElementsByTagName("body")[0];var aa=C(r);aa.setAttribute("type",q);var Z=X.appendChild(aa);if(Z){var Y=0;(function(){if(typeof Z.GetVariable!=D){var ab=Z.GetVariable("$version");if(ab){ab=ab.split(" ")[1].split(",");M.pv=[parseInt(ab[0],10),parseInt(ab[1],10),parseInt(ab[2],10)]}}else{if(Y<10){Y++;setTimeout(arguments.callee,10);return}}X.removeChild(aa);Z=null;H()})()}else{H()}}function H(){var ag=o.length;if(ag>0){for(var af=0;af<ag;af++){var Y=o[af].id;var ab=o[af].callbackFn;var aa={success:false,id:Y};if(M.pv[0]>0){var ae=c(Y);if(ae){if(F(o[af].swfVersion)&&!(M.wk&&M.wk<312)){w(Y,true);if(ab){aa.success=true;aa.ref=z(Y);ab(aa)}}else{if(o[af].expressInstall&&A()){var ai={};ai.data=o[af].expressInstall;ai.width=ae.getAttribute("width")||"0";ai.height=ae.getAttribute("height")||"0";if(ae.getAttribute("class")){ai.styleclass=ae.getAttribute("class")}if(ae.getAttribute("align")){ai.align=ae.getAttribute("align")}var ah={};var X=ae.getElementsByTagName("param");var ac=X.length;for(var ad=0;ad<ac;ad++){if(X[ad].getAttribute("name").toLowerCase()!="movie"){ah[X[ad].getAttribute("name")]=X[ad].getAttribute("value")}}P(ai,ah,Y,ab)}else{p(ae);if(ab){ab(aa)}}}}}else{w(Y,true);if(ab){var Z=z(Y);if(Z&&typeof Z.SetVariable!=D){aa.success=true;aa.ref=Z}ab(aa)}}}}}function z(aa){var X=null;var Y=c(aa);if(Y&&Y.nodeName=="OBJECT"){if(typeof Y.SetVariable!=D){X=Y}else{var Z=Y.getElementsByTagName(r)[0];if(Z){X=Z}}}return X}function A(){return !a&&F("6.0.65")&&(M.win||M.mac)&&!(M.wk&&M.wk<312)}function P(aa,ab,X,Z){a=true;E=Z||null;B={success:false,id:X};var ae=c(X);if(ae){if(ae.nodeName=="OBJECT"){l=g(ae);Q=null}else{l=ae;Q=X}aa.id=R;if(typeof aa.width==D||(!/%$/.test(aa.width)&&parseInt(aa.width,10)<310)){aa.width="310"}if(typeof aa.height==D||(!/%$/.test(aa.height)&&parseInt(aa.height,10)<137)){aa.height="137"}j.title=j.title.slice(0,47)+" - Flash Player Installation";var ad=M.ie&&M.win?"ActiveX":"PlugIn",ac="MMredirectURL="+O.location.toString().replace(/&/g,"%26")+"&MMplayerType="+ad+"&MMdoctitle="+j.title;if(typeof ab.flashvars!=D){ab.flashvars+="&"+ac}else{ab.flashvars=ac}if(M.ie&&M.win&&ae.readyState!=4){var Y=C("div");X+="SWFObjectNew";Y.setAttribute("id",X);ae.parentNode.insertBefore(Y,ae);ae.style.display="none";(function(){if(ae.readyState==4){ae.parentNode.removeChild(ae)}else{setTimeout(arguments.callee,10)}})()}u(aa,ab,X)}}function p(Y){if(M.ie&&M.win&&Y.readyState!=4){var X=C("div");Y.parentNode.insertBefore(X,Y);X.parentNode.replaceChild(g(Y),X);Y.style.display="none";(function(){if(Y.readyState==4){Y.parentNode.removeChild(Y)}else{setTimeout(arguments.callee,10)}})()}else{Y.parentNode.replaceChild(g(Y),Y)}}function g(ab){var aa=C("div");if(M.win&&M.ie){aa.innerHTML=ab.innerHTML}else{var Y=ab.getElementsByTagName(r)[0];if(Y){var ad=Y.childNodes;if(ad){var X=ad.length;for(var Z=0;Z<X;Z++){if(!(ad[Z].nodeType==1&&ad[Z].nodeName=="PARAM")&&!(ad[Z].nodeType==8)){aa.appendChild(ad[Z].cloneNode(true))}}}}}return aa}function u(ai,ag,Y){var X,aa=c(Y);if(M.wk&&M.wk<312){return X}if(aa){if(typeof ai.id==D){ai.id=Y}if(M.ie&&M.win){var ah="";for(var ae in ai){if(ai[ae]!=Object.prototype[ae]){if(ae.toLowerCase()=="data"){ag.movie=ai[ae]}else{if(ae.toLowerCase()=="styleclass"){ah+=' class="'+ai[ae]+'"'}else{if(ae.toLowerCase()!="classid"){ah+=" "+ae+'="'+ai[ae]+'"'}}}}}var af="";for(var ad in ag){if(ag[ad]!=Object.prototype[ad]){af+='<param name="'+ad+'" value="'+ag[ad]+'" />'}}aa.outerHTML='<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"'+ah+">"+af+"</object>";N[N.length]=ai.id;X=c(ai.id)}else{var Z=C(r);Z.setAttribute("type",q);for(var ac in ai){if(ai[ac]!=Object.prototype[ac]){if(ac.toLowerCase()=="styleclass"){Z.setAttribute("class",ai[ac])}else{if(ac.toLowerCase()!="classid"){Z.setAttribute(ac,ai[ac])}}}}for(var ab in ag){if(ag[ab]!=Object.prototype[ab]&&ab.toLowerCase()!="movie"){e(Z,ab,ag[ab])}}aa.parentNode.replaceChild(Z,aa);X=Z}}return X}function e(Z,X,Y){var aa=C("param");aa.setAttribute("name",X);aa.setAttribute("value",Y);Z.appendChild(aa)}function y(Y){var X=c(Y);if(X&&X.nodeName=="OBJECT"){if(M.ie&&M.win){X.style.display="none";(function(){if(X.readyState==4){b(Y)}else{setTimeout(arguments.callee,10)}})()}else{X.parentNode.removeChild(X)}}}function b(Z){var Y=c(Z);if(Y){for(var X in Y){if(typeof Y[X]=="function"){Y[X]=null}}Y.parentNode.removeChild(Y)}}function c(Z){var X=null;try{X=j.getElementById(Z)}catch(Y){}return X}function C(X){return j.createElement(X)}function i(Z,X,Y){Z.attachEvent(X,Y);I[I.length]=[Z,X,Y]}function F(Z){var Y=M.pv,X=Z.split(".");X[0]=parseInt(X[0],10);X[1]=parseInt(X[1],10)||0;X[2]=parseInt(X[2],10)||0;return(Y[0]>X[0]||(Y[0]==X[0]&&Y[1]>X[1])||(Y[0]==X[0]&&Y[1]==X[1]&&Y[2]>=X[2]))?true:false}function v(ac,Y,ad,ab){if(M.ie&&M.mac){return}var aa=j.getElementsByTagName("head")[0];if(!aa){return}var X=(ad&&typeof ad=="string")?ad:"screen";if(ab){n=null;G=null}if(!n||G!=X){var Z=C("style");Z.setAttribute("type","text/css");Z.setAttribute("media",X);n=aa.appendChild(Z);if(M.ie&&M.win&&typeof j.styleSheets!=D&&j.styleSheets.length>0){n=j.styleSheets[j.styleSheets.length-1]}G=X}if(M.ie&&M.win){if(n&&typeof n.addRule==r){n.addRule(ac,Y)}}else{if(n&&typeof j.createTextNode!=D){n.appendChild(j.createTextNode(ac+" {"+Y+"}"))}}}function w(Z,X){if(!m){return}var Y=X?"visible":"hidden";if(J&&c(Z)){c(Z).style.visibility=Y}else{v("#"+Z,"visibility:"+Y)}}function L(Y){var Z=/[\\\"<>\.;]/;var X=Z.exec(Y)!=null;return X&&typeof encodeURIComponent!=D?encodeURIComponent(Y):Y}var d=function(){if(M.ie&&M.win){window.attachEvent("onunload",function(){var ac=I.length;for(var ab=0;ab<ac;ab++){I[ab][0].detachEvent(I[ab][1],I[ab][2])}var Z=N.length;for(var aa=0;aa<Z;aa++){y(N[aa])}for(var Y in M){M[Y]=null}M=null;for(var X in swfobject){swfobject[X]=null}swfobject=null})}}();return{registerObject:function(ab,X,aa,Z){if(M.w3&&ab&&X){var Y={};Y.id=ab;Y.swfVersion=X;Y.expressInstall=aa;Y.callbackFn=Z;o[o.length]=Y;w(ab,false)}else{if(Z){Z({success:false,id:ab})}}},getObjectById:function(X){if(M.w3){return z(X)}},embedSWF:function(ab,ah,ae,ag,Y,aa,Z,ad,af,ac){var X={success:false,id:ah};if(M.w3&&!(M.wk&&M.wk<312)&&ab&&ah&&ae&&ag&&Y){w(ah,false);K(function(){ae+="";ag+="";var aj={};if(af&&typeof af===r){for(var al in af){aj[al]=af[al]}}aj.data=ab;aj.width=ae;aj.height=ag;var am={};if(ad&&typeof ad===r){for(var ak in ad){am[ak]=ad[ak]}}if(Z&&typeof Z===r){for(var ai in Z){if(typeof am.flashvars!=D){am.flashvars+="&"+ai+"="+Z[ai]}else{am.flashvars=ai+"="+Z[ai]}}}if(F(Y)){var an=u(aj,am,ah);if(aj.id==ah){w(ah,true)}X.success=true;X.ref=an}else{if(aa&&A()){aj.data=aa;P(aj,am,ah,ac);return}else{w(ah,true)}}if(ac){ac(X)}})}else{if(ac){ac(X)}}},switchOffAutoHideShow:function(){m=false},ua:M,getFlashPlayerVersion:function(){return{major:M.pv[0],minor:M.pv[1],release:M.pv[2]}},hasFlashPlayerVersion:F,createSWF:function(Z,Y,X){if(M.w3){return u(Z,Y,X)}else{return undefined}},showExpressInstall:function(Z,aa,X,Y){if(M.w3&&A()){P(Z,aa,X,Y)}},removeSWF:function(X){if(M.w3){y(X)}},createCSS:function(aa,Z,Y,X){if(M.w3){v(aa,Z,Y,X)}},addDomLoadEvent:K,addLoadEvent:s,getQueryParamValue:function(aa){var Z=j.location.search||j.location.hash;if(Z){if(/\?/.test(Z)){Z=Z.split("?")[1]}if(aa==null){return L(Z)}var Y=Z.split("&");for(var X=0;X<Y.length;X++){if(Y[X].substring(0,Y[X].indexOf("="))==aa){return L(Y[X].substring((Y[X].indexOf("=")+1)))}}}return""},expressInstallCallback:function(){if(a){var X=c(R);if(X&&l){X.parentNode.replaceChild(l,X);if(Q){w(Q,true);if(M.ie&&M.win){l.style.display="block"}}if(E){E(B)}}a=false}}}}();
/**
 * Fixing previously declared namespace
 */
if (typeof ina == 'undefined')
{
  var ina = {
	player : {}
  };
}
ina.player.Config = function (hostUrl)
{  
    this.url = {
        'domainIna'             :  'ina.fr'
    };
	this.hostUrl = hostUrl ;
    
    this.css = {
      'idGlobal'                        :   'inaMediaPlaybackGlobal',
      'classDivVignette'                :   'inaVignette',
      'classConteneurDivVignette'       :   'inaVidSimilaires',
      'classInfoSimialire'              :   'infoSimilaire',
      'classDivSlide'                   :   'inaContenuSlide',
      'classVideo'                      :   'inaVideo',
      'classPlayerTitleVideo'           :   'inaPlayerVideoTitle',
      'classControlBar'                 :   'inaPlayerControlBar',
      'classSlideNav'                   :   'inaSlideNav',
      'classASlide'                     :   'encours',
      'classASlideOver'                 :   'hover',
      'classTitleSlide'                 :   'inaTitlePlaylist',
      'classBlocPartage'                :   'inaPlayerBlocPartage',
      'classBtnPlay'                    :   'smp.play',
      'classTime'                       :   'time',
      'classPlayer'                     :   'inaPlayer',
      'classPlayOverlay'                :   'playoverlay',
      'classPlayerError'                :   'inaVideoError',
      'classPlayerBox'                  :   'inaVideoError',
      'classVideoProgress'              :   'video-progress-bar',
      'classBtnDefilementProgressBar'   :   'smp slider',
      'classVideoTrack'                 :   'video-track',
      'classVideoPlayed'                :   'played',
      'classVideoBuffered'              :   'buffered',
      'classCurrentTime'                :   'currentTime',
      'classCurrentDuration'            :   'duration',
      'classGroupPlayer'                :   'inaGroupPlayer', // permet de selectionner l'ensemble du player
      'classPlayerTitleBottomVideo'     :   'inaTitlePlaylistBottom',
      'classBtnNext'                    :   'next',
      'classBtnPrev'                    :   'previous',
      'classBtnNav'                     :   'navitem',
      'classDateVideo'                  :   'inaPlayerAnnee',
      'classPreVideo'                   :   'inaPrevideo',
      'classVideotoolTipTime'           :   'inaToolTipTime',
      'classPlayerBlocTeasing'          :   'extraitBoutique',
      'classSlideShowPlaylist'          :   'slideshow',
      'classSlidesContainerPlaylist'    :   'slidesContainer',
      'classSlidesInnerPlaylist'        :   'slideInner',
      'classSlidesBtnNavPlaylist'       :   'navigation',
      'classSlidesBtnLeftPlaylist'      :   'leftControl',
      'classSlidesBtnRightPlaylist'     :   'rightControl',
      'classBlocLoader'                 :   'blocLoaderjs',
      'classPushPremium'                :   'pushPremium',
      'classPushPremiumEnd'             :   'end',
      'classPushPremiumMessage'         :   'message',
      'classExportBox'                  :   'exportBox'
    };
    
    this.swf = (typeof hostUrl == 'undefined') ? 'http://player.ina.fr/bundles/inaplayerplayer/swf/InaFlashPlayer.swf' : hostUrl+'/bundles/inaplayerplayer/swf/InaFlashPlayer.swf';
    
    this.general = {
        // taille afférente à jwplayer
        'marginUiControlBar' : '55',
        'marginUiControlBarCastDisable'    :   '55',
        'marginUiControlBarCastEnable'    :   '80',
        // taille max et min du player 
        'playerWidthMax'        :   '620',
        'playerHeightMax'       :   '349',
        'playerWidthMin'        :   '320',
        'playerHeightMin'       :   '220',
        // taille min pour afficher les video similaires
        'playerWidthSimilaireMin'        :   '460',
        'playerHeightSimilaireMin'       :   '259',
        //taille mini pour afficher le teasinf
        'playerHeightTeasingMin'       :   '349',
        // taille imagette slide playlist
        'slidePlaylistWidth'    :   '106',
        'slidePlaylistHeight'   :   '77',
        // taille imagette notice similaires
        'slideSimilairesWidth'  :   '142',
        'slideSimilairesHeight' :   '107',
        // nombre de vignnette maximum des notices similaires
        'nbVignetteSimilaireMax':   4,
        'nbVignetteSimilaireMin':   2,
        // interval de temps des animation (ex: show contol bar)
        'intervalTime'          :   1000
    };
    
    this.module = {
        'analytics' : 'fr.ina.player.analytics',
        'ads'       : 'fr.ina.player.ads',
        'shares'    : 'fr.ina.player.shares',
        'teasing'   : 'fr.ina.player.teasing',
        'premium'   : 'fr.ina.player.premium',
        'svod'      : 'fr.ina.player.svod',
        'googleAnalytics'    : 'http://www.realeyes.com/osmf/plugins/tracking/google'
    };
    
    
    // appel des classes mères
    inaRouting.call(this, this.url.ServicePresentation);
    inaUtils.call(this);
    inaError.call(this);
};
function inaError() 
{
    this.listError = {
            'MRSS_FILE_ERROR':      'Chargement du fichier mrss impossible. Nous vous prions de bien vouloir nous excuser pour la gène occasionnée.',
            'SKIN_FILE_ERROR':      'Chargement du fichier de skin impossible. Nous vous prions de bien vouloir nous excuser pour la gène occasionnée.',
            'CONFIG_FILE_ERROR':    'Chargement du fichier de configuration impossible. Nous vous prions de bien vouloir nous excuser pour la gène occasionnée.',
            'SRC_OPTION_ERROR':     'L\'option source n\'est pas définie. Nous vous prions de bien vouloir nous excuser pour la gène occasionnée.',
            'CONFIG_OPTION_ERRROR': 'L\'option configuration n\'est pas définie. Nous vous prions de bien vouloir nous excuser pour la gène occasionnée.',
            'COOKIE_UNACTIVE': 'Les cookies doivent être actifs, pour le bon fonctionnement du player.',
            'HTML5_VIDEO_NOT_CAPABILITY': 'Votre navigateur ne supporte pas la vidéo en HTML5.',
            'FLASH_NOT_CAPABILITY': 'Votre version de FLASH PLAYER doit être supérieur ou égal à la version 10.'
        };
    
    this.getMsgError = function(code)
    {
        if (this.listError.hasOwnProperty(code))
            return this.listError[code];
    }
}
function inaRouting(urlServicePresentation) 
{
    this.getUrlMrssNoticesSimilaires = function(idNotice, urlNoticesSimilaires)
    {
        var exp=new RegExp('{GUID}',"g");
        if (exp.exec(urlNoticesSimilaires))
            return urlNoticesSimilaires.replace(exp, idNotice);
        else return null;
    }
    
    this.getUrlPlayerNotice = function(idNotice)
    {
        return urlServicePresentation+'/player/notice/'+idNotice+'.mrss';
    }

    this.getUrlMrssNotice = function(idNotice)
    {
        return urlServicePresentation+'/notices/'+idNotice+'.mrss';
    }
}
function inaUtils() 
{  
    this.getDomaine = function(domain)
    {
        var result = false;
        if (document.location.host.indexOf(domain) != -1)
            result = true;
        
        return result;
    }
    
    this.isFileInDomaineIna = function(file, domain)
    {
        var result = false;
        if (file.indexOf(domain) != -1)
            result = true;
        
        return result;
    }
    
    this.isSimilaires = function(url)
    {
        var result = false;
        
        if (url.indexOf('similaire') != -1)
            result = true;
        
        return result;
    }
    
    /**
    * Fonction de récupération des paramètres GET de la page
    * @return Array Tableau associatif contenant les paramètres GET
    */
    this.extractUrlParams = function()
    {	
            var t = location.search.substring(1).split('/');
            var f = [];
            for (var i=0; i<t.length; i++){
                    var x = t[ i ].split('/');
                    f[x[0]]=x[1];
            }
            return f;
    }
    
    /**
     * indique si l'url est une url de mrss de notice similaires
     * @param url string
     * @return bool
     */
    this.isSimilaires = function(url)
    {
        var result = false;
        
        if (url.indexOf('similaire') != -1)
            result = true;
        
        return result;
    }
} 
/**
 * jQuery.browser.mobile (http://detectmobilebrowser.com/)
 *
 * jQuery.browser.mobile will be true if the browser is a mobile device
 *
 **/
(function(a){jQuery.browser.mobile=/android.+mobile|avantgo|bada\/|blackberry|iPad|Android|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|meego.+mobile|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(di|rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4))})(navigator.userAgent||navigator.vendor||window.opera);

var inaAdsManager = function(player)
{
    if (UtilsHelperClass.is_undefined(player) === true)
       throw new Error("player is not defined");

    this.player = player;
    this.adServersOptions = {};
    this.isVPAID = false;
}

inaAdsManager.prototype = {

    /**
     * Recupere les flux et analyse s'il s'agit de flux VPAID
     * Cree la configuration des pubs
     */
    init: function() {

        this.adServersOptions = {};
        this.isVPAID = false;
        
        var inaAdServersOptions = {
            client:'vast',
            admessage: "Votre vidéo débutera dans xx secondes",
            schedule:{}
        };

        var inaAdServersOptionsMobile = {
            client:'vast',
            admessage: "Votre vidéo débutera dans xx secondes",
            schedule:{}
        };

        //add ads is media allow ads
        if(this.player.playerActions.isMediaAllowToAds(this.player.options.getSite(),this.player.adsRules) 
                && this.player.playerActions.getCappingIndex() === '0' 
                && UtilsHelperClass.is_empty_object(this.player.configurations.getAds()) === false)
        {
            var nBreak = 1;
            var nBreakMobile = 1;
            
            $.each(this.player.configurations.getAds()[this.player.configurationHTML5.module.ads]['ads']['ad'], function(i, adServer) {
                var type = adServer['type'].replace('roll', '');
                var url = adServer['url'];
//                url = "http://www.adotube.com/kernel/vast/vast.php?omlSource=http://www.adotube.com/php/services/player/OMLService.php?avpid=UDKjuff&ad_type=pre-rolls&platform_version=vast20as3&vpaid=1&rtb=0&publisher=adotube.com&title=[VIDEO_TITLE&tags=[VIDEO_TAGS]&description=[VIDEO_DESCRIPTION]&videoURL=[VIDEO_FILE_URL]";
                
                //tag vpaid Liverail qui diffuse une créa vpaid :
//                url = "http://ad4.liverail.com/?LR_PUBLISHER_ID=39794&LR_SCHEMA=vast2-vpaid&LR_TITLE=INA.fr&LR_VIDEO_ID=video&LR_VERTICALS=MI,V1,C1,C2,C13,A4,G1,S1&LR_TAGS=testlr&LR_CONTENT=1&LR_AUTOPLAY=1&LR_VIDEO_POSITION=0&LR_SKIP_COUNTDOWN=Vous pouvez passer l'annonce dans {COUNTDOWN} secondes&LR_SKIP_MESSAGE=Fermer X";

                //tag vpaid Liverail qui diffuse une créa classique
//                url = "http://ad4.liverail.com/?LR_PUBLISHER_ID=39794&LR_SCHEMA=vast2-vpaid&LR_TITLE=INA.fr&LR_VIDEO_ID=video&LR_VERTICALS=MI,V1,C1,C2,C13,A4,G1,S1&LR_TAGS=testlr2&LR_CONTENT=1&LR_AUTOPLAY=1&LR_VIDEO_POSITION=0&LR_SKIP_COUNTDOWN=Vous pouvez passer l'annonce dans {COUNTDOWN} secondes&LR_SKIP_MESSAGE=Fermer X";

                //tag vast qui diffuse une créa vpaid
//                url = "http://ad4.liverail.com/?LR_PUBLISHER_ID=39794&LR_SCHEMA=vast2&LR_TITLE=INA.fr&LR_VIDEO_ID=video&LR_VERTICALS=MI,V1,C1,C2,C13,A4,G1,S1&LR_TAGS=testlr&LR_CONTENT=1&LR_AUTOPLAY=1&LR_VIDEO_POSITION=0&LR_SKIP_COUNTDOWN=Vous pouvez passer l'annonce dans {COUNTDOWN} secondes&LR_SKIP_MESSAGE=Fermer X";

                //tag vast qui diffuse une créa classique
//                url = "http://ad4.liverail.com/?LR_PUBLISHER_ID=39794&LR_SCHEMA=vast2&LR_TITLE=INA.fr&LR_VIDEO_ID=video&LR_VERTICALS=MI,V1,C1,C2,C13,A4,G1,S1&LR_TAGS=testlr2&LR_CONTENT=1&LR_AUTOPLAY=1&LR_VIDEO_POSITION=0&LR_SKIP_COUNTDOWN=Vous pouvez passer l'annonce dans {COUNTDOWN} secondes&LR_SKIP_MESSAGE=Fermer X";

                var format = adServer['format'];
                var mobile = adServer['mobile'];
                var exp = new RegExp('{random}',"g");
                if (exp.exec(url))  url = url.replace(exp, Math.floor(Math.random()*100000000));
                if (url !== '')
                {
                    if (mobile === 'false')
                    {
                        inaAdServersOptions.schedule['adbreak' + nBreak] = {
                            offset: type,
                            tag: url,
                            format: format
                        };
                        nBreak++;
                    }
                    else
                    {
                        inaAdServersOptionsMobile.schedule['adbreak' + nBreakMobile] = {
                            offset: type,
                            tag: url,
                            format: format
                        };
                        nBreakMobile++;
                    }
                }
            });

            this.adServersOptions = {
                standard: inaAdServersOptions,
                mobile: inaAdServersOptionsMobile
            };
        }
    }
};
(function($)
{
    $.fn.inaXitiPlugIn = function(operation, player)
    {
        var namespace = "/modules/";
        switch (operation)
        {
            case 'init':
                if (!player.configurationHTML5 instanceof ina.player.Config)
                    throw new Error(namespace + ": configuration is not a instance of ina.player.Config");

                if (!player.configurations instanceof ConfigurationDataClass)
                    throw new Error(namespace + ": configurations is not a instance of ConfigurationDataClass");

                if (!player.mrss instanceof MrssDataClass)
                    throw new Error(namespace + ": mrss is not a instance of MrssDataClass");


                var configXmlAnalytics = player.configurations.getAnalytics()[player.configurationHTML5.module.analytics];

                var param = {
                    nameSpace            : 'xiti',
                    contentType          : player.mrss.getMedium(), // obligatoire - type de contenu - audio/video
                    levelsite            : 10, // niveau dans lequel est rangé le contenu - 10:video 11:audio
                    wordingContent       : player.mrss.getCategoryDefault()+'/'+player.mrss.getNoticeId()+'-'+player.mrss.getTitle(), // libéllé du contenu
                    action               : "play", // action - play/pause/stop
                    customAction         : 0,
                    refreshTime          : 0, // optionnel - seconde
                    duration             : (!isNaN(player.mrss.getDuration())) ? Math.round(player.mrss.getDuration()) : 30 , // seconde
                    positionInformation  : 0, // information de position de lecture
                    identifyingQuality   : 2, // identifiant de qualité - 1:audio 2:video
                    identifyingFlow      : 12, // identifiant de flux ou information - vidéo:12(500kbps) audio:2(128kbps)
                    localisation         : player.configurations.getLocation(), // localisation du contenu afficher par le player, pas l'endroit ou le player est afficher - int/ext
                    diffusion            : "clip",
                    sizeContent          : 0, // taille du contenu en Ko, laisser vide si L=Live
                    format               : 9, // format du contenu mp3,wma,flv... - video:9(.mp4) audio:1(.mp3)
                    resolution           : screen.width + 'x' + screen.height,
                    bodyResolution       : screen.width + 'x' + screen.height + 'x' + screen.pixelDepth + 'x' + screen.colorDepth,
                    siteLevel            : 3
                };

                if (param.contentType === 'audio')
                {
                    param.levelsite = 11;
                    param.identifyingFlow = 2;
                    param.identifyingQuality = 1;
                    param.format = 1;
                }

                if (param.contentType !== 'audio' || param.contentType !== 'video')
                    param.contentType = 'video';
              
                if (this.currentTime && this.currentTime !== undefined)
                {
                    param.positionInformation  = 'rmp='+this.currentTime+'&rmpf=0&rmbufp=0';
                }

                var classAnalytics = new inaAnalytics();
                param.wordingContent = classAnalytics.formatCategory(param.wordingContent);

                if(typeof configXmlAnalytics !== 'undefined' )
                {
                    for (var i = 0; i < configXmlAnalytics['analytics']['server']['events']['event'].length; i++)
                    {
                       var eventType = configXmlAnalytics['analytics']['server']['events']['event'][i]['name'];
                       classAnalytics.addEvent($(this), param, eventType, configXmlAnalytics['analytics']['server']['connectionArgs'], player);
                    }
                }
                break;
            case 'destroy':	      
                $(this).unbind('xitiplay').unbind('xitipause').unbind('xitiend');
                break;
            case 'reset':
                $.fn.inaXitiPlugIn('destroy');
                $.fn.inaXitiPlugIn('init', player);
                break;
        }
    };
})(jQuery);

/**
 * Class inaAdMedia
 */
function inaAnalytics() {

    /* is the media compatible with mobile display */
    this.addEvent = function (element, params, eventType, config, player) {
        var handler = {
            type: eventType
        };
        // bind evenement xitiplay/xitipause/xitiend
        //event.data
        var eData = {
            params: params,
            handler: handler,
            config: config,
            player: player
        };
        $(element).bind(params.nameSpace + eventType, eData, this.switchEventObject);
    };
  
    /* unset events handlers */
    this.removeEvent = function (element, eventType) {
        $(element).unbind(eventType, this.switchEventObject);
    };
  
    this.switchEventObject = function(event, opt) {
        var params = event.data.params;
        var handler = event.data.handler;
        var config = event.data.config;
        var player = event.data.player;
        
        var isPartner = (opt && opt.userProfile.search("PARTNER") >= 0) ? true : false;
        var matches = (opt !== null) ? opt.userProfile.match(/(_(\d*))/) : null;
        var partnerId = (isPartner && matches !== null ) ? matches[2] + "::" : "";
        var action = (event.action) ? event.action : "";
        var actionName = (event.actionName) ? event.actionName + "::" : "";
        var chapter = "";
        var duration = (player.jwplayer) ? Math.round(player.jwplayer.getDuration()) : 30;
        var mode = (player.jwplayer) ? player.jwplayer.renderingMode : 'flash';
        var contentType = params.contentType;
        var d = new Date();
        
        switch (handler.type)   
        {
            case 'play':
            case 'pause':
            case 'end':
            
            switch (action)
            {
                case "":
                    chapter = partnerId + mode + '::' + params.wordingContent;    // html5::categorie::sous-categorie::titre
                break;
                case "share":
                    chapter = action + "::" + actionName + partnerId + mode + '::' + params.wordingContent;    // html5::categorie::sous-categorie::titre
                break;
				case "pass_debut":
					chapter = "fiche_media::player::bandeau_achat_debut::pass_illimite";
                break;
				case "pass_fin":
					chapter = "fiche_media::player::bandeau_achat_fin::pass_illimite";
                break;
				case "achat_debut":
					chapter = "fiche_media::player::bandeau_achat_debut::telecharger";
                break;
				case "achat_fin":
					chapter = "fiche_media::player::bandeau_achat_fin::telecharger";
                break;
                case "postroll":
                case "preroll":
                    chapter = action;
                    contentType = 'vpost';
                    if (isNaN(event.currentTarget.duration))
                        duration = 30; // duree par defaut pour les pubs
                    else 
                        duration = Math.round(event.currentTarget.duration);
                break;
                default:
                    chapter = action;
                break;
            }

            var url = config.xtsd;                 // host
            url += config.url;                     //url
            url += 's='+config.account;            // compte
            url += '&p='+chapter;
            url += '&type='+contentType;  
            url += '&s2='+params.levelsite;
            url += '&a='+handler.type;
            url += '&m1='+duration;
            url += '&m2=rpm';
            url += '&rmpf=0';
            url += '&rmbufp=0';
            url += '&m3='+params.identifyingQuality;
            url += '&m4='+params.identifyingFlow;
            url += '&m5='+params.localisation;
            url += '&m6='+params.diffusion;
            url += '&m7=0';
            url += '&m8='+params.format;
            url += '&prich=video_page';
            url += '&s2rich='+params.siteLevel;
            url += '&hl=' + d.getHours() + 'x' + d.getMinutes() + 'x' + d.getSeconds();
            url += '&r=' + screen.width + 'x' + screen.height + 'x' + screen.pixelDepth + 'x' + screen.colorDepth;

            //appel xiti par beacon image
            var img = new Image();
            img.src = url;

            break;
        }
    };
  
    this.formatCategory = function(chaine) {
        // On remplace / par ::
        var reg = new RegExp('\\/', "g");
        chaine =  chaine.replace(reg, '::');
        // On ne garde que les mots
        // supprime les ::
    //        var reg=new RegExp('\\W', "g");
    //        chaine =  chaine.replace(reg, ' ');
        // On remplace les espaces par -
        reg = new RegExp('\\ +', "g");
        chaine =  chaine.replace(reg, '-');
        // On remplace les guillemets par - 
        reg = new RegExp('\\"+', "g");
        chaine =  chaine.replace(reg, '');
        // supprime les -
        reg = new RegExp('\\-$', "g");
        chaine =  chaine.replace(reg, '');
        reg = new RegExp('^\\-', "g");
        chaine =  chaine.replace(reg, '');  
        // remplace les caracteres speciaux
        chaine = this.replaceSpec(chaine);
        return chaine;
    };
  
    this.replaceSpec = function(Texte) {
        var TabSpec = {"[":"-","]":"-","À":"A","Á":"A","Â":"A","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","È":"E","É":"E","Ê":"E","Ë":"E","Ç":"C","Ì":"I","Í":"I","Î":"I","Ï":"I","Ù":"U","Ú":"U","Û":"U","Ü":"U","Ñ":"","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","è":"e","é":"e","ê":"e","ë":"e","ç":"c","ì":"i","í":"i","î":"i","ï":"i","ù":"u","ú":"u","û":"u","ü":"u","ÿ":"y","ñ":"n","_":"-","&":"et"}; 
        var RegList = "";
        for (Char in TabSpec){
            RegList += Char.replace(/([[\]])/g,"\\$1");
        }
        var reg = new RegExp('['+RegList+']','g');
        return Texte.replace(reg, function() {
            return TabSpec[arguments[0].toLowerCase()];
        });
    };
}
var infoTemplate = function(player)
{
    if (UtilsHelperClass.is_undefined(player) === true)
       throw new Error("player is not defined");

    this.player = player;
    this.containerTitle = null;
    this.containerYear = null;
    this.insertInPlayerDom = 'dock';
}

infoTemplate.prototype = {

    init: function() {

        var date = new Date(this.player.mrss.getPubDate());
        var year = date.getFullYear();
        var title = this.player.mrss.getTitle();
        
        if (this.player.configurations.getDisplayTitleBar() === 'true')
        {
            var classTitle = this.player.configurationHTML5.css.classPlayerTitleVideo;
            this.containerTitle = $(this.player.$element).find('[class=' + classTitle + ']');
            if (this.containerTitle.length === 0)
            {
                this.containerTitle = $('<div />');
                this.containerTitle.attr('id', this.player.options.getIdPlayer() + "_title");
                this.containerTitle.addClass(classTitle);
                $(this.player.$element).prepend(this.containerTitle);
            }
            if (this.player.configurations.getDisplayYear() === 'false')
                title =  year + " - " + title;
            
            this.containerTitle.html(title);
        }
        
        if (this.player.configurations.getDisplayYear() === 'true')
        {
            var classYear = this.player.configurationHTML5.css.classDateVideo;
            this.containerYear = $(this.player.$element).find('[class=' + classYear + ']');
            if (this.containerYear.length === 0 )
            {
                this.containerYear = $('<div />');
                this.containerYear.attr('id', this.player.options.getIdPlayer() + "_year");
                this.containerYear.addClass(classYear);
                $(this.player.$element).prepend(this.containerYear);
            }
            this.containerYear.html(year);
        }
        this.show();
    },
    
    hide: function() {
        if (this.player.jwplayer.getRenderingMode() === 'html5') return;
        this.doHide();
    },
    
    doHide: function() {
        if (this.containerTitle) this.containerTitle.hide();
        if (this.containerYear) this.containerYear.hide();
    },

    show: function() {
        if (this.containerTitle) this.containerTitle.show();
        if (this.containerYear) this.containerYear.show();
    },

    adPlay: function() {
        this.doHide();
    },

    adPause: function() {
        this.doHide();
    },

    contentStart: function() {
        this.show();
        var ittemp = this;        
        setTimeout(function () {
            if (!ittemp.player.casting) ittemp.hide();
        }, 1000);
    },
    
    contentEnd: function() {
        this.doHide();
    },
    
    moveTo:function(id) {
        if (this.containerTitle) this.containerTitle.appendTo('#' + id);
        if (this.containerYear) this.containerYear.appendTo('#' + id);
    },

    remove:function() {
        if (this.containerTitle) this.containerTitle.remove();
        if (this.containerYear) this.containerYear.remove();
    }
};
var slideshowTemplate = function(player)
{
    if (UtilsHelperClass.is_undefined(player) === true)
       throw new Error("player is not defined");
    
    this.player = player;
    this.prevIndex = 0;
    this.containerSlideshow = null;
    this.slickDiv = null;
    this.slickParams = {};
    this.items = null;
    this.isAnimating = true;
    this.insertInPlayerDom = 'controlbar';
    this.fullscreen = false;
    this.widthSlideBox = 0;
    this.sliding = false;
    this.visible = false;
}

slideshowTemplate.prototype = {

    /**
     * Cree la liste des éléments de la playlist
     */
    init: function() {
        this.items = new Array();
        for (var notice in this.player.mrss.getItems())
        {
            var mediaTitle = this.player.mrss.getTitle(notice).replace(/\//g, "-");
            this.items.push({
                file: this.player.mrss.getMediaFile(notice) + '/' + this.player.mrss.getNoticeId(notice) + '::' + encodeURIComponent(mediaTitle),
                type : this.player.mrss.getMediaFileExtension(notice),
                image: this.player.mrss.getPoster(notice),
                title: '',//this.player.mrss.getTitle(notice),
                mediaid: this.player.mrss.getNoticeId(notice),
                description: this.player.mrss.getDescription(notice)
            });
        }
    },
    
    /**
     * Ajoute les vignettes et le titre de la playlist dossier
     */
    create: function() {
        this.containerSlideshow = $(this.player.$element).find('.'+this.player.configurationHTML5.css.classDivSlide);
        /**
         * Ajoute la div qui contient la liste des vignette des playlists/dossiers
         */
        if (this.containerSlideshow.length === 0)
        {
            this.containerSlideshow = $('<div />');
            this.containerSlideshow.attr('id', this.player.options.getIdPlayer() + "_slideshow");
            this.containerSlideshow.addClass(this.player.configurationHTML5.css.classDivSlide);
            $(this.player.$element).prepend(this.containerSlideshow);
            this.containerSlideshow.hide();
        }
        
        // nom de la playlist
        var divTitlePlaylist = $('<div />');
        divTitlePlaylist.addClass(this.player.configurationHTML5.css.classTitleSlide);
        divTitlePlaylist.html(this.player.mrss.getChannelTitle());
        this.containerSlideshow.append(divTitlePlaylist);

        //liste vignette
        var afficheVignette = !((this.player.$element.width() <= this.player.configurationHTML5.general.playerWidthMin) || (this.player.$element.height() <= this.player.configurationHTML5.general.playerHeightMin));

        if (!afficheVignette)
        {
            this.containerSlideshow.remove();
        }
        else
        {
            this.slickDiv = $('<div />');
            this.slickDiv.addClass(this.player.configurationHTML5.css.classSlideShowPlaylist);

            this.items = new Array();
            for (var notice in this.player.mrss.getItems())
            {
                this.items.push({
                    file: this.player.mrss.getMediaFile(notice),
                    image: this.player.mrss.getPoster(notice),
                    title: '',//this.player.mrss.getTitle(notice),
                    mediaid: this.player.mrss.getNoticeId(notice),
                    description: this.player.mrss.getDescription(notice)
                });

                var nElement = $('<div />');
                
                if (parseInt(notice) === this.player.mrss.getIndexCurrentNotice())
                {
                    nElement.addClass(this.player.configurationHTML5.css.classASlide);
                }

                var linkElement = $('<a />');
                linkElement.attr({
                    //title: this.player.mrss.getTitle(notice),
                    //href: '#',
                    'data-id': notice,
                    'data-title': this.player.mrss.getTitle(notice),
                    'data-poster': this.player.mrss.getPoster(notice),
                    'data-link': this.player.mrss.getLink(notice),
                    'data-pubdate': this.player.mrss.getPubDate(notice)
                });

                linkElement.bind("click", this, this.clickHandler);
                linkElement.bind("mouseover", this, this.overHandler);
                linkElement.bind("mouseout", this, this.outHandler);

                var vignetteElement = $('<img />');
                vignetteElement.attr({
                    src: this.player.mrss.getSmallPoster(notice)
                });

                linkElement.append(vignetteElement);
                nElement.append(linkElement);
                this.slickDiv.append(nElement);
            }
            this.containerSlideshow.append(this.slickDiv);

            var left = $('<a />');
            left.addClass(this.player.configurationHTML5.css.classSlidesBtnNavPlaylist).addClass(this.player.configurationHTML5.css.classSlidesBtnLeftPlaylist);

            var right = $('<a />');
            right.addClass(this.player.configurationHTML5.css.classSlidesBtnNavPlaylist).addClass(this.player.configurationHTML5.css.classSlidesBtnRightPlaylist);
            
            this.slickDiv.prepend(left).append(right);
            
            var widthAvailable = $(this.player.$element).width();
            if (this.player.jwplayer.getRenderingMode() === 'flash')
            {
                widthAvailable = widthAvailable - (this.player.configurationHTML5.general.marginUiControlBar*2);
            
                this.containerSlideshow.css({
                    width: + widthAvailable + 'px',
                    left: this.player.configurationHTML5.general.marginUiControlBar + 'px'
                });
            }
            this.widthSlideBox = widthAvailable - left.width() - right.width();
            this.slickParams = {
                slidesToScroll: Math.floor(this.widthSlideBox/this.player.configurationHTML5.general.slidePlaylistWidth),
                slidesToShow: Math.floor(this.widthSlideBox/this.player.configurationHTML5.general.slidePlaylistWidth),
                prevArrow: left,
                nextArrow: right,
                infinite: false,
                variableWidth: true,
                draggable: false,
                refresh : true
            };
            if (this.player.jwplayer.getRenderingMode() === 'flash')
            {
                var playlist = this;
                this.slickParams = $.extend({}, this.slickParams, {
                    onAfterChange: function(slick, currentSlide, nextSlide) {
                            playlist.slideAfterChange(playlist, slick, currentSlide, nextSlide);
                    },
                    onBeforeChange: function(slick, currentSlide, nextSlide) {
                            playlist.slideBeforeChange(playlist, slick, currentSlide);
                    }
                });
            }
            
            this.slickDiv.slick(this.slickParams);
            this.show();
        }
    },
    
    slideAfterChange: function (playlist, slick, currentSlide, nextSlide) {
        playlist.sliding = false;
        if (!playlist.visible) {
            setTimeout(function(){
                playlist.hide();
            }, 500);
        }
    },
    
    slideBeforeChange: function (playlist, slick, currentSlide) {
        playlist.sliding = true;
        playlist.show();
    },
    
    overHandler: function(event){
        event.preventDefault();
        if (event.data.player.casting && event.data.player.jwplayer.renderingMode === "flash") return;
        if (event.data.player.isPlayingAds) return;
        if (event.data.sliding) return;
        $(event.currentTarget).parent().addClass(event.data.player.configurationHTML5.css.classASlideOver);
        $(event.data.player.$element).find('.' + event.data.player.configurationHTML5.css.classTitleSlide).html($(event.currentTarget).attr('data-title'));
    },

    outHandler: function(event){
        event.preventDefault();
        if (event.data.player.casting && event.data.player.jwplayer.renderingMode === "flash") return;
        if (event.data.player.isPlayingAds) return;
        if (event.data.sliding) return;
        
        $(event.currentTarget).parent().removeClass(event.data.player.configurationHTML5.css.classASlideOver);
        $(event.data.player.$element).find('.' + event.data.player.configurationHTML5.css.classTitleSlide).html(event.data.player.mrss.getChannelTitle());
    },
    
    clickHandler: function(event){
        event.preventDefault();
        if (event.data.player.casting && event.data.player.jwplayer.renderingMode === "flash") return;
        if (event.data.player.isPlayingAds) return;
        if (event.data.sliding) return;
        
        event.data.player.onVideoPlaylistChange($(this).attr('data-id'), event.data.player);
    },

    setCurrentItem: function(player, el, playlist) {
        var currClass = player.configurationHTML5.css.classASlide;
        player.plugins.playlist.slickDiv.find('div.' + currClass).removeClass(currClass);
        player.plugins.playlist.slickDiv.find('div[index=' + el.index + ']').addClass(currClass);
        player.onVideoPlaylistChange(el.index, player);
    },
    
    hide: function() {
        if (!this.sliding)
        {
            this.containerSlideshow.hide();
        }
        this.visible = false;
    },

    show: function() { 
        this.containerSlideshow.show();
        this.visible = true;
    },
    
    gotoCurrent: function() {
        this.resize(this.player, {
            width: $(this.player.$element).width(),
            height: 100
        });
    },
    
    resize: function(player, size) {
        var currIdx = player.plugins.playlist.slickDiv.slickCurrentSlide();
        
        //si on souhaite se repositionner sur le slide en cours de lecture
        var currSlide = player.plugins.playlist.slickDiv.find('div.' + player.configurationHTML5.css.classASlide);
        if (currSlide && currSlide[0] !== undefined) {
            currIdx = $(currSlide[0]).attr('index');
        }

        var widthAvailable = size.width;
        if (player.jwplayer.getRenderingMode() === 'flash')
        {
            widthAvailable = widthAvailable - (player.configurationHTML5.general.marginUiControlBar*2);

            player.plugins.playlist.containerSlideshow.css({
                width: widthAvailable + 'px',
                left: player.configurationHTML5.general.marginUiControlBar + 'px'
            });
        }
        
        var widthSlide = widthAvailable - $(player.$element).find('.' + player.configurationHTML5.css.classSlidesBtnLeftPlaylist).width() - $(player.$element).find('.' + player.configurationHTML5.css.classSlidesBtnRightPlaylist).width();
        if (this.widthSlideBox !== widthSlide)
        {
            this.widthSlideBox = widthSlide;
            
            player.plugins.playlist.slickParams = $.extend({}, player.plugins.playlist.slickParams, {
                slidesToScroll: Math.floor(this.widthSlideBox/player.configurationHTML5.general.slidePlaylistWidth),
                slidesToShow: Math.floor(this.widthSlideBox/player.configurationHTML5.general.slidePlaylistWidth)
            });

            player.plugins.playlist.slickDiv.slickSetOption('slidesToScroll', player.plugins.playlist.slickParams.slidesToShow);
            player.plugins.playlist.slickDiv.slickSetOption('slidesToScroll', player.plugins.playlist.slickParams.slidesToShow);
        }
        if (player.jwplayer.getFullscreen() !== player.plugins.playlist.fullscreen)
        {
            player.plugins.playlist.fullscreen = player.jwplayer.getFullscreen();
            currIdx = player.plugins.playlist.slickParams.slidesToShow*(Math.floor(currIdx/player.plugins.playlist.slickParams.slidesToShow));
            player.plugins.playlist.slickDiv.slickGoTo(currIdx, false);
        }
    },

    moveTo:function(id) {
        if (this.containerSlideshow)
        {
            this.containerSlideshow.appendTo('#' + id).show();
        }
    }
};
var pushPremiumTemplate = function(player)
{
    if (UtilsHelperClass.is_undefined(player) === true)
       throw new Error("player is not defined");

    this.player = player;
    this.containerPush = null;
    this.containerPushEnd = null;
    this.insertInPlayerDom = true;
    this.hideable = true;
}

pushPremiumTemplate.prototype = {

    init: function() {
        
        if (!this.player.configurations.getPremium().hasOwnProperty(this.player.configurationHTML5.module.premium)) return;
        if (!UtilsHelperClass.is_array(this.player.configurations.getPremium()[this.player.configurationHTML5.module.premium]['premium'])) return;
        
        var isNoticePremium = (this.player.mrss.getIsPremium() === '1');
        var isNoticeSvod = (this.player.mrss.getIsSvod() === '1');
        var isUserPremium = (this.player.configurations.getIsPremium() === '1');
        
        //si notice pas premium, on affiche pas le bandeau
        if (!isNoticePremium) return;
        
        //si notice premium et inclue dans offre svod et si user abonné premium, on affiche pas le bandeau
        if (isNoticePremium && isNoticeSvod && isUserPremium) return;
        
        var classPush = this.player.configurationHTML5.css.classPushPremium;
        var classPushEnd = this.player.configurationHTML5.css.classPushPremiumEnd;
        var classPushMessage = this.player.configurationHTML5.css.classPushPremiumMessage;
        
        this.containerPush = $(this.player.$element).find('[class=' + classPush + ']');
        if (this.containerPush.length === 0 )
        {
            //push début
            this.containerPush = $('<div />');
            this.containerPush.attr('id', this.player.options.getIdPlayer() + "_push");
            this.containerPush.addClass(classPush);
        }
        
        this.containerPushEnd = $(this.player.$element).find('.' + classPush + '.' + classPushEnd);
        if (this.containerPushEnd.length === 0 )
        {
            //push fin
            this.containerPushEnd = $('<div />');
            this.containerPushEnd.attr('id', this.player.options.getIdPlayer() + "_push_end");
            this.containerPushEnd.addClass(classPush).addClass(classPushEnd);
        }

        this.containerPush.hide().html('');
        this.containerPushEnd.hide().html('');
        
        var classCtnBtn = 'ctnBtn';
        
        //message
        if ((isUserPremium && isNoticePremium && !isNoticeSvod) || (!isUserPremium))
        {
            var text = (this.player.configurations.getPremium().hasOwnProperty(this.player.configurationHTML5.module.premium)) ? this.player.configurations.getPremium()[this.player.configurationHTML5.module.premium]['premium']['message_' + this.player.mrss.getMedium()] : "";
            if (text !== '')
            {
                if (!this.player.options.noPurchase)
                {
                    var buytext = (this.player.configurations.getPremium().hasOwnProperty(this.player.configurationHTML5.module.premium)) ? this.player.configurations.getPremium()[this.player.configurationHTML5.module.premium]['premium']['message_' + this.player.mrss.getMedium() + '_buy'] : "";
                    if (buytext !== '')
                    {
                        text = text + '&lt;br&gt;' + buytext;
                    }
                }
                var divText = $("<div/>").html(UtilsHelperClass.htmlDecode(text));
                var message = $('<div />').addClass(classPushMessage + ' ' + this.player.mrss.getMedium()).append(divText);
                this.containerPush.append(message);
            }
        }
        
        if (!this.player.options.noPurchase)
        {
            var containerBtn = $('<div />').addClass(classCtnBtn);
            var containerBtnEnd = $('<div />').addClass(classCtnBtn);

            //boutons pass & achat
            var actionsBtn = this.player.configurations.getPremium()[this.player.configurationHTML5.module.premium]['premium']['actions'];
            var nbBtn = 0;
            //bouton pass
            if (!isUserPremium && isNoticePremium && isNoticeSvod)
            {
                var pricePass = (actionsBtn['pass'].price !== "") ? actionsBtn['pass'].price : this.player.mrss.getPrice();
                var linkPass = actionsBtn['pass'].link;
                var expPass = new RegExp('{ID}',"g");
                if (expPass.exec(linkPass))
                    linkPass = linkPass.replace(expPass, this.player.mrss.getNoticeId());

                var btnPass = $('<div />').addClass('btn-twice btn--sm');
                btnPass.attr('tag', 'pass_debut');
                btnPass.attr('link', linkPass);
                btnPass.attr('event', actionsBtn['pass'].event);
                var btnLabelPass = $('<div />').addClass('btn-twice__content').html(actionsBtn['pass'].label);
                var btnPricePass = $('<div />').addClass('btn-twice__price').html(pricePass);
                btnPass.append(btnLabelPass).append(btnPricePass);

                btnPass.bind("click", this, this.clickHandler);

                containerBtn.append(btnPass);
                var btnPassEnd = btnPass.clone();
                btnPassEnd.attr('tag', 'pass_fin');
                btnPassEnd.bind("click", this, this.clickHandler);
                containerBtnEnd.append(btnPass.clone());
                nbBtn++;
            }

            //bouton achat
            if ((isUserPremium && isNoticePremium && !isNoticeSvod) || (!isUserPremium && isNoticePremium))
            {
                var priceAchat = (actionsBtn['achat'].price !== "") ? actionsBtn['achat'].price : this.player.mrss.getPrice();
                var linkAchat = actionsBtn['achat'].link;
                var expAchat = new RegExp('{ID}',"g");
                if (expAchat.exec(linkAchat))
                    linkAchat = linkAchat.replace(expAchat, this.player.mrss.getNoticeId());
                var expAchat2 = new RegExp('{TYPE}',"g");
                if (expAchat2.exec(linkAchat))
                    linkAchat = linkAchat.replace(expAchat2, this.player.mrss.getMedium());

                var btnAchat = $('<div />').addClass('btn-twice btn--sm');
                btnAchat.attr('tag', 'achat_debut');
                btnAchat.attr('link', linkAchat);
                btnAchat.attr('event', actionsBtn['achat'].event);
                btnAchat.attr('player-data-addproducttocart', this.player.mrss.getNoticeId());
                btnAchat.attr('player-data-acquisitionmode', 'download');
                var btnLabelAchat = $('<div />').addClass('btn-twice__content').html(actionsBtn['achat'].label);
                var btnPriceAchat = $('<div />').addClass('btn-twice__price').html(priceAchat);
                btnAchat.append(btnLabelAchat).append(btnPriceAchat);
                btnAchat.bind("click", this, this.clickHandler);

                if (!isUserPremium && isNoticePremium) {
                    containerBtn.append(btnAchat);
                    nbBtn++;
                }
                var btnAchatEnd = btnAchat.clone();
                btnAchatEnd.attr('tag', 'achat_fin');
                btnAchatEnd.bind("click", this, this.clickHandler);
                containerBtnEnd.append(btnAchatEnd);
            }
            if (nbBtn === 1) containerBtn.addClass('center');

            if (!containerBtn.is(':empty')) this.containerPush.append(containerBtn);
            if (!containerBtnEnd.is(':empty')) this.containerPushEnd.append(containerBtnEnd);
        }
        //adaptation taille
        var widthAvailable = $(this.player.$element).width();
        if (this.player.jwplayer.getRenderingMode() === 'flash')
        {
            widthAvailable = widthAvailable - (this.player.configurationHTML5.general.marginUiControlBar*2);

            this.containerPush.css({
                width: + widthAvailable + 'px',
                left: this.player.configurationHTML5.general.marginUiControlBar + 'px'
            });
        }

        this.hide();
        this.show();
        
        if (!this.containerPush.is(':empty')) $(this.player.$element).prepend(this.containerPush);
        if (!this.containerPushEnd.is(':empty')) $(this.player.$element).prepend(this.containerPushEnd);
    },
    
    clickHandler: function(e) {
        var event = $(e.currentTarget).attr('event');
        var link = $(e.currentTarget).attr('link');
        var tag = $(e.currentTarget).attr('tag');
		$(e.data.player.$element).trigger({
			type:'xitiplay', 
			action:tag
		}, e.data.player.options);
		
        switch (event) {
            case 'link':
                window.open(link);
            break;
            case 'internal':
                if (e.data.player.options.noPurchase) return;
                try {
                    OGP.CartView.addProductWithModal({ 
                        productId : $(e.currentTarget).attr('player-data-addproducttocart'),
                        quantity : 1,
                        acquisitionMode : $(e.currentTarget).attr('player-data-acquisitionmode')
                    });
                }
                catch (e){
                    window.open(link);
                };
            break;
        }
    },

    focus: function() {
        if (this.player.mrss.getIsPremium() === '1' && this.containerPush && this.player.jwplayer.getRenderingMode() === 'html5' && this.containerPush.parent().attr('id') !== this.player.options.getIdPlayer() + '_controlbar')
        {
            this.containerPush.appendTo('#' + this.player.options.getIdPlayer() + '_controlbar');
        }
    },
    
    contentStart: function() {
        if (this.player.mrss.getIsPremium() === '1')
        {
            if (this.containerPushEnd && this.containerPushEnd.is(':visible')) this.containerPushEnd.fadeOut(200);
            var delay = (this.player.configurations.getPremium().hasOwnProperty(this.player.configurationHTML5.module.premium)) ? this.player.configurations.getPremium()[this.player.configurationHTML5.module.premium]['premium']['delay'] : 1;
            delay = delay * 1000;
            this.hideable = false;
            if (this.containerPush) 
            {
                this.containerPush.show();
                var pptpl = this;
                setTimeout(function () {
                    if (pptpl.player.jwplayer.getRenderingMode() === 'html5') {
                        pptpl.containerPush.appendTo('#' + pptpl.player.options.getIdPlayer() + '_controlbar');
                    } else {
                        if (!pptpl.player.casting) 
                        {
                            setTimeout(function () {
                                if (pptpl.player.jwplayer.getState() === 'PLAYING') pptpl.containerPush.fadeOut(100);
                            }, delay);
                        }
                    }
                    pptpl.hideable = true;
                }, delay);
            }
        }
    },

    contentEnd: function() {
        if (this.player.mrss.getIsPremium() === '1')
        {
            if (this.containerPushEnd) this.containerPushEnd.fadeIn(400);
            if (this.containerPush) this.containerPush.hide();
        }
    },

    hide: function() {
        if (! this.hideable) return;
        if (this.containerPush) this.containerPush.hide();
        if (this.containerPushEnd) this.containerPushEnd.hide();
    },

    show: function() {
        if (this.containerPush) this.containerPush.show();
    },
    
    resize: function(player, size) {
        var widthAvailable = $(player.$element).width();
        if (player.jwplayer.getRenderingMode() === 'flash')
        {
            widthAvailable = widthAvailable - (player.configurationHTML5.general.marginUiControlBar*2);
            if (player.plugins.pushPremium.containerPush)
            {
                player.plugins.pushPremium.containerPush.css({
                    width: + widthAvailable + 'px',
                    left: player.configurationHTML5.general.marginUiControlBar + 'px'
                });
            }
        }
    },

    moveTo:function(id) {
        if (this.player.mrss.getIsPremium() === '1')
        {
            if (this.containerPush) this.containerPush.appendTo('#' + id);
            if (this.containerPushEnd) this.containerPushEnd.appendTo('#' + id);
        }
    },

    remove:function() {
        if (this.containerPush) this.containerPush.remove();
        if (this.containerPushEnd) this.containerPushEnd.remove();
    }
};
var sharingTemplate = function (player)
{
    if (UtilsHelperClass.is_undefined(player) === true)
       throw new Error("player is not defined");

    this.player = player;
    this.shares = null;
    this.containerExport = null;
    this.insertInPlayerDom = true;
}

sharingTemplate.prototype = {

    init: function() {
        this.remove();
        this.shares = new Array();
        
        if (this.player.socialSharingRules === "deny") return;
        if (!this.player.configurations.getShares().hasOwnProperty(this.player.configurationHTML5.module.shares)) return;
        if (!UtilsHelperClass.is_array(this.player.configurations.getShares()[this.player.configurationHTML5.module.shares]['shares'])) return;
        
        var idPlayer = this.player.options.getIdPlayer();
        //ajout des boutons
        var btnConf = this.player.configurations.getShares()[this.player.configurationHTML5.module.shares]['shares']['share'];
         
        for (var bc in btnConf)
        {
            var link = btnConf[bc]['link'];
            var embed = this.player.configurations.codeEmbed;
            var exp = new RegExp('{TITLE}',"g");
            if (exp.exec(link))
                link = link.replace(exp, encodeURIComponent(this.player.mrss.getTitle()));
            if (exp.exec(embed))
                embed = embed.replace(exp, encodeURIComponent(this.player.mrss.getTitle()));

            exp = new RegExp('{URL}',"g");
            if (exp.exec(link))
                link = link.replace(exp, encodeURIComponent(this.player.mrss.getLink()));
            if (exp.exec(embed))
                embed = embed.replace(exp, encodeURIComponent(this.player.mrss.getLink()));

            exp = new RegExp('{ID}',"g");
            //var idItem = ((this.player.mrss.getTypeMedia() === 'playlist' || this.player.mrss.getTypeMedia() === 'dossier') && this.player.options.idItem) ? this.player.options.idItem : this.player.mrss.getNoticeId();
            var idItem = this.player.mrss.getNoticeId();
            if (exp.exec(link))
                link = link.replace(exp, idItem);
            if (exp.exec(embed))
                embed = embed.replace(exp, idItem);

            exp = new RegExp('{RANDOM}',"g");
            if (exp.exec(link))
                link = link.replace(exp, Math.floor(Math.random()*100000));
            if (exp.exec(embed))
                embed = embed.replace(exp, Math.floor(Math.random()*100000));

            var obj = {
                'id': idPlayer + '_' + btnConf[bc]['name'],
                'name': btnConf[bc]['name'],
                'link': link,
                'image': btnConf[bc]['image'],
                'embed': embed
            };
            
            this.shares[btnConf[bc]['name']] = obj;
        }

        for (var i in this.shares)
        {
            var share = this.shares[i];
            var player = this.player;
            switch (share['name'])
            {
                case 'fb':
                    if (this.player.mediaRules !== "NONE")
                    {
                        var fbLink = share['link'];
                        this.player.jwplayer.addButton(
                            share['image'],
                            "",
                            function () {
                                if (player.jwplayer.getState() === 'PLAYING') player.jwplayer.pause();
                                $(player.$element).trigger({
                                    type:'xitiplay', 
                                    action:'share', 
                                    actionName:'facebook'
                                }, player.options);
                                window.open(fbLink);
                            }, 
                            share['id']
                        );
                    }
                    break;
                case 'twitter':
                    if (this.player.mediaRules !== "NONE")
                    {
                        var twitterLink = share['link'];
                        this.player.jwplayer.addButton(
                            share['image'],
                            "",
                            function () {
                                if (player.jwplayer.getState() === 'PLAYING') player.jwplayer.pause();
                                $(player.$element).trigger({
                                    type:'xitiplay', 
                                    action:'share', 
                                    actionName:'twitter'
                                }, player.options);
                                window.open(twitterLink);
                            },
                            share['id']
                        );
                    }
                    break;
                case 'boutique':
                    var boutiqueLink = share['link'];
                    this.player.jwplayer.addButton(
                        share['image'],
                        "",
                        function () {
                            if (player.jwplayer.getState() === 'PLAYING') player.jwplayer.pause();
                            $(player.$element).trigger({
                                type:'xitiplay', 
                                action:'share', 
                                actionName:'boutique'
                            }, player.options);
                            window.open(boutiqueLink);
                        },
                        share['id']
                    );
                    break; 
                case 'export':
                    if (this.player.socialSharingRules !== "deny")
                    {
                        var idContainerExport = this.player.options.getIdPlayer() + "_export";
                        //creation de la boite d'export
                        this.containerExport = $('div#' + idContainerExport);
                        /**
                         * Ajoute la div qui contient le code embed
                         */
                        if (this.containerExport.length === 0)
                        {
                            this.containerExport = $('<div />');
                            this.containerExport.attr('id', idContainerExport);
                            this.containerExport.addClass(this.player.configurationHTML5.css.classExportBox);
                            $(this.player.$element).prepend(this.containerExport);
                            this.containerExport.hide();

                            // message de copie du code d'export
                            var divMessageExport = $('<div />');
                            divMessageExport.addClass('message');
                            divMessageExport.html("Appuyer sur Ctrl-C pour copier le code d'export");
                            this.containerExport.append(divMessageExport);

                            // textarea avec le code d'export
                            var textExport = $('<textarea />');
                            textExport.attr('id', idContainerExport + "_clipboard");
                            textExport.attr('spellcheck', "false");
                            textExport.attr('autocorrect', "off");
                            textExport.attr('autocapitalize', "off");
                            this.containerExport.append(textExport);

                            //lien pour fermer
                            var closeExport = $('<div />');
                            closeExport.addClass('close');
                            closeExport.html('fermer');
                            closeExport.on('click', function(e){
                                $('#' + idContainerExport).hide();
                            });
                            this.containerExport.append(closeExport);
                        }
                        
                        this.containerExport.find('textarea[id$=_clipboard]').val(share['embed']);
                        this.player.jwplayer.addButton(
                            share['image'],
                            "", 
                            function () {
                                if (player.jwplayer.renderingMode === "flash" && player.jwplayer.getFullscreen()) return;
                                if (player.jwplayer.getState() === 'PLAYING') player.jwplayer.pause();
                                $(player.$element).trigger({
                                    type:'xitiplay', 
                                    action:'share', 
                                    actionName:'export'
                                }, player.options);
                                $('#' + idContainerExport).show();
                                $('#' + idContainerExport + "_clipboard").focus().select();
                            }, 
                            share['id']
                        );
                    }
                    break;
            }
        }
    },

    remove: function() {
        for (var i in this.shares) 
        {
            this.player.jwplayer.removeButton(this.shares[i]['id']);
        }
    },

    moveTo:function(id) {
        if (this.containerExport)
            this.containerExport.appendTo('#' + id);
    }
};
var ConfigurationDataClass = function(urlConfiguration)
{
    this.namespace = '/lib/data/';
   
   
    this.msgError = {
        'string'            : ' must be a string',
        'bool'              : ' must be a boolean',
        'stringLocation'    : ' must be a string and equal to int or ext',
        'msgUndefined'      : ' must be defined',
        'array'             : ' must be a array',
        'object'            : ' must be a object'
    };
    
    this.urlConfiguration = urlConfiguration;
    
    this.debug = false;
    this.src = null;
    this.relatedMedia = null;
    this.site = null;
    this.isPremium = false;
    this.userProfile = null;
    this.location = 'ext';
    this.codeEmbed = null;
    this.displayTitleBar = true;
    this.displayYear = true;
    this.displayRelatedMedia = false;
    this.displayShare = false;
    this.poster = null;
    this.autoplay = false;
    this.posterMode = false;
    
    this.width = null;
    this.height = null;
    this.controlBarMode = false;
    this.autoLoop = false;
    this.controlBarAutoHide = false;
    this.javascriptControls = true;
    this.frequencyCapping = 2;
    // notices similaires
    this.rel = true;
    // sous titre
    this.caption = false;
    this.favorFlashOverHtml5Video = true;
    
    this.analytics = {};
    this.ads = {};
    this.shares = {};
    this.teasing = {};
    this.premium = {};
    this.jwpConfig = {};
    this.jwpPlugins = {};
    this.jwpCastConfig = {};
    this.configuration = undefined;
    
    this.metadata = ['fr.ina.player.analytics', 'fr.ina.player.ads','fr.ina.player.shares'];
}

ConfigurationDataClass.prototype = {
    
    init: function()
    {        
        XmlHelperClass.parseXmlConfiguration(this, {'metadata' : this.metadata });
    },
        
    getRelatedMedia: function()
    {
        return this.relatedMedia;
    },
    
    getDebug: function()
    {
        return this.debug;
    },
    
    getSite: function()
    {
        return this.site;
    },

    getIsPremium: function()
    {
        return this.isPremium;
    },
    
    getSrc: function()
    {
        return this.src
    },
    
    getUserProfile: function()
    {
        return this.userProfile;
    },
    
    getLoop: function()
    {
        return this.loop;
    },
    
    getLocation: function()
    {
        return this.location;
    },
    
    getDisplayTitleBar: function()
    {
        return this.displayTitleBar;
    },
    
    getDisplayYear: function()
    {
        return this.displayYear;
    },
    
    getDisplayRelatedMedia: function()
    {
        return this.displayRelatedMedia;
    },
    
    getDisplayShare: function()
    {
        return this.displayShare;
    },
    
    getAnalytics: function()
    {
        return this.analytics;
    },
    
    getAds: function()
    {
        return this.ads;
    },
    
    getShares: function()
    {
        return this.shares;
    },
    
    getTeasing: function()
    {
        return this.teasing;
    },

    getPremium: function()
    {
        return this.premium;
    },

    getJwpConfig: function()
    {
        return this.jwpConfig;
    },

    getJwpPlugins: function()
    {
        return this.jwpPlugins;
    },

    getJwpCastConfig: function()
    {
        return this.jwpCastConfig;
    },
    
    getFrequencyCapping: function()
    {
        return this.frequencyCapping;
    },
    
    getPoster: function()
    {
        return this.poster;
    },
    
    getWidth: function()
    {
        return this.width;
    },
    
    getHeight: function()
    {
        return this.height;
    },
    
    getControlBarMode: function()
    {
        return this.controlBarMode;
    },
    
    getControlBarAutoHide: function()
    {
        return this.controlBarAutoHide;
    },
    
    getJavascriptControls: function()
    {
        return this.javascriptControls;
    },
    
    getRel: function()
    {
        return this.rel;
    },
    
    getCaption: function()
    {
        return this.caption;
    },
    
    getAutoplay: function()
    {
        return this.autoplay;
    },
	
	getPosterMode: function()
    {
        return this.posterMode;
    },
    
    getDisabledControls: function()
    {
        return this.disabledControls;
    },
    
    setRelatedMedia: function(value)
    {
        if (UtilsHelperClass.is_undefined(value) !== true)
        {
            if (UtilsHelperClass.is_string(value) === true)
                this.relatedMedia = value;
            else throw new Error(this.namespace+" relatedMedia"+this.msgError[0].string);
        } 
            else throw new Error(this.namespace+" relatedMedia"+this.msgError.msgUndefined);
    },
    
    setDebug: function(value)
    {
        if (UtilsHelperClass.is_undefined(value) !== true)
        {
            if (UtilsHelperClass.is_undefined(value) !== true && UtilsHelperClass.is_bool(value) === true || value.toLowerCase() == 'true' || value.toLowerCase() == 'false')
                this.debug = value;
            else throw new Error(this.namespace+" debug"+this.msgError[0].bool);
        } 
            else throw new Error(this.namespace+" debug"+this.msgError.msgUndefined);  
    },
    
    setLoop: function(value)
    {
        if (UtilsHelperClass.is_undefined(value) !== true)
        {
            if (UtilsHelperClass.is_undefined(value) !== true && UtilsHelperClass.is_bool(value) === true || value.toLowerCase() == 'true' || value.toLowerCase() == 'false')
                this.loop = value;
            else throw new Error(this.namespace+" loop"+this.msgError[0].bool);
        } 
            else throw new Error(this.namespace+" loop"+this.msgError.msgUndefined);  
    },
    
    setSite: function(value)
    {
        if (UtilsHelperClass.is_undefined(value) !== true)
        {
            if (UtilsHelperClass.is_string(value) === true)
                this.site = value;
            else throw new Error(this.namespace+" site"+this.msgError[0].string);
        } 
            else throw new Error(this.namespace+" site"+this.msgError.msgUndefined);
    },
    
    setUserProfile: function(value)
    {
        if (UtilsHelperClass.is_undefined(value) !== true)
        {
            if (UtilsHelperClass.is_string(value) === true)
                this.userProfile = value;
            else throw new Error(this.namespace+" userProfile"+this.msgError[0].string);
        } 
            else throw new Error(this.namespace+" userProfile"+this.msgError.msgUndefined);
    },
    
    setLocation: function(value)
    {
        if (UtilsHelperClass.is_undefined(value) !== true)
        {
            if (UtilsHelperClass.is_string(value) === true && (value == 'int' || value == 'ext'))
                this.location = value;
            else throw new Error(this.namespace+" location"+this.msgError[0].stringLocation);
        } 
            else throw new Error(this.namespace+" location"+this.msgError.msgUndefined);
    },
    
    setCodeEmbed: function(value)
    {
        if (UtilsHelperClass.is_undefined(value) !== true)
        {
            if (UtilsHelperClass.is_string(value) === true)
                this.codeEmbed = value;
            else throw new Error(this.namespace+" codeEmbed"+this.msgError[0].string);
        } 
            else throw new Error(this.namespace+" codeEmbed"+this.msgError.msgUndefined);
    },
    
    setDisplayRelatedMedia: function(value)
    {
        if (UtilsHelperClass.is_undefined(value) !== true)
        {
            if (UtilsHelperClass.is_undefined(value) !== true && UtilsHelperClass.is_bool(value) === true || value.toLowerCase() == 'true' || value.toLowerCase() == 'false')
                this.displayRelatedMedia = value;
            else throw new Error(this.namespace+" DisplayRelatedMedia"+this.msgError[0].bool);
        } 
            else throw new Error(this.namespace+" DisplayRelatedMedia"+this.msgError.msgUndefined); 
    },
    
    setDisplayShare: function(value)
    {
        if (UtilsHelperClass.is_undefined(value) !== true)
        {
            if (UtilsHelperClass.is_undefined(value) !== true && UtilsHelperClass.is_bool(value) === true || value.toLowerCase() == 'true' || value.toLowerCase() == 'false')
                this.displayShare = value;
            else throw new Error(this.namespace+" DisplayShare"+this.msgError[0].bool);
        } 
            else throw new Error(this.namespace+" DisplayShare"+this.msgError.msgUndefined); 
    },
    
    setDisplayTitleBar: function(value)
    {
        if (UtilsHelperClass.is_undefined(value) !== true)
        {
            if (UtilsHelperClass.is_undefined(value) !== true && UtilsHelperClass.is_bool(value) === true || value.toLowerCase() == 'true' || value.toLowerCase() == 'false')
                this.displayTitleBar = value;
            else throw new Error(this.namespace+" DisplayTitleBar"+this.msgError[0].bool);
        } 
            else throw new Error(this.namespace+" DisplayTitleBar"+this.msgError.msgUndefined); 
    },
    
    setDisplayYear: function(value)
    {
        if (UtilsHelperClass.is_undefined(value) !== true)
        {
            if (UtilsHelperClass.is_bool(value) === true || value.toLowerCase() == 'true' || value.toLowerCase() == 'false')
                this.displayYear = value;
            else throw new Error(this.namespace+" DisplayYear"+this.msgError[0].bool);
        } 
            else throw new Error(this.namespace+" DisplayYear"+this.msgError.msgUndefined);
    },
    
    setFrequencyCapping: function(value)
    {
        if (UtilsHelperClass.is_undefined(value) !== true)
        {
            value = parseInt(value);
            if (UtilsHelperClass.is_number(value) === true && value >= 0)
                this.frequencyCapping = value;
            else throw new Error(this.namespace+" frequencyCapping"+this.msgError[0].number);
        } 
            else throw new Error(this.namespace+" frequencyCapping"+this.msgError.msgUndefined);
    },
    
    setPoster: function(value)
    {
        if (UtilsHelperClass.is_undefined(value) !== true)
        {
            if (UtilsHelperClass.is_string(value) === true)
                this.poster = value;
            else throw new Error(this.namespace+" Poster"+this.msgError[0].string);
        } 
            else throw new Error(this.namespace+" Poster"+this.msgError.msgUndefined);
    },
    
    setWidth: function(value)
    {
        if (UtilsHelperClass.is_undefined(value) !== true)
        {
            value = parseInt(value);
            if (UtilsHelperClass.is_number(value) === true && value > 0)
                this.width = value;
            else throw new Error(this.namespace+" Width"+this.msgError[0].number);
        } 
            else throw new Error(this.namespace+" Width"+this.msgError.msgUndefined);
    },
    
    setHeight: function(value)
    {
        if (UtilsHelperClass.is_undefined(value) !== true)
        {
            value = parseInt(value);
            if (UtilsHelperClass.is_number(value) === true && value > 0)
                this.height = value;
            else throw new Error(this.namespace+" Height"+this.msgError[0].number);
        } 
            else throw new Error(this.namespace+" Height"+this.msgError.msgUndefined);
    },
    
    setControlBarMode: function(value)
    {
        if (UtilsHelperClass.is_undefined(value) !== true)
        {
            if (UtilsHelperClass.is_bool(value) === true || value.toLowerCase() == 'true' || value.toLowerCase() == 'false')
                this.controlBarMode = value;
            else throw new Error(this.namespace+" ControlBarMode"+this.msgError[0].bool);
        } 
            else throw new Error(this.namespace+" ControlBarMode"+this.msgError.msgUndefined);
    },
    
    setControlBarAutoHide: function(value)
    {
        if (UtilsHelperClass.is_undefined(value) !== true)
        {
            if (UtilsHelperClass.is_bool(value) === true || value.toLowerCase() == 'true' || value.toLowerCase() == 'false')
                this.controlBarAutoHide = value;
            else throw new Error(this.namespace+" ControlBarAutoHide"+this.msgError[0].bool);
        } 
            else throw new Error(this.namespace+" ControlBarAutoHide"+this.msgError.msgUndefined);
    },
    
    setJavascriptControls: function(value)
    {
        if (UtilsHelperClass.is_undefined(value) !== true)
        {
            if (UtilsHelperClass.is_bool(value) === true || value.toLowerCase() == 'true' || value.toLowerCase() == 'false')
                this.javascriptControls = value;
            else throw new Error(this.namespace+" JavascriptControls"+this.msgError[0].bool);
        } 
            else throw new Error(this.namespace+" JavascriptControls"+this.msgError.msgUndefined);
    },
    
    setRel: function(value)
    {
        if (UtilsHelperClass.is_undefined(value) !== true)
        {
            if (UtilsHelperClass.is_bool(value) === true || value.toLowerCase() == 'true' || value.toLowerCase() == 'false')
                this.rel = value;
            else throw new Error(this.namespace+" Rel"+this.msgError[0].bool);
        } 
            else throw new Error(this.namespace+" Rel"+this.msgError.msgUndefined);
    },
    
    setCaption: function(value)
    {
        if (UtilsHelperClass.is_undefined(value) !== true)
        {
            if (UtilsHelperClass.is_bool(value) === true || value.toLowerCase() == 'true' || value.toLowerCase() == 'false')
                this.caption = value;
            else throw new Error(this.namespace+" Caption"+this.msgError[0].bool);
        } 
            else throw new Error(this.namespace+" Caption"+this.msgError.msgUndefined);
    },
    
    setAutoplay: function(value)
    {
        if (UtilsHelperClass.is_undefined(value) !== true)
        {
            if (UtilsHelperClass.is_bool(value) === true || value.toLowerCase() == 'true' || value.toLowerCase() == 'false')
                this.autoplay = value;
            else throw new Error(this.namespace+" Autoplay"+this.msgError[0].bool);
        } 
            else throw new Error(this.namespace+" Autoplay"+this.msgError.msgUndefined);
    },
	
	setPosterMode: function(value)
    {
        if (UtilsHelperClass.is_undefined(value) !== true)
        {
            if (UtilsHelperClass.is_bool(value) === true || value.toLowerCase() == 'true' || value.toLowerCase() == 'false')
                this.posterMode = value;
            else throw new Error(this.namespace+" PosterMode"+this.msgError[0].bool);
        } 
            else throw new Error(this.namespace+" PosterMode"+this.msgError.msgUndefined);
    },
    
    setFavorFlashOverHtml5Video: function(value)
    {
        if (UtilsHelperClass.is_undefined(value) !== true)
        {
            if (UtilsHelperClass.is_bool(value) === true || value.toLowerCase() == 'true' || value.toLowerCase() == 'false')
                this.favorFlashOverHtml5Video = value;
            else throw new Error(this.namespace+" FavorFlashOverHtml5Video"+this.msgError[0].bool);
        } 
            else throw new Error(this.namespace+" FavorFlashOverHtml5Video"+this.msgError.msgUndefined);
    },
    
    setSrc: function(value)
    {
        if (UtilsHelperClass.is_undefined(value) !== true)
        {
            if (UtilsHelperClass.is_string(value) === true)
                this.src = value;
            else throw new Error(this.namespace+" Src"+this.msgError[0].string);
        } 
            else throw new Error(this.namespace+" Src"+this.msgError.msgUndefined);
    },
    
    setAnalytics: function(value)
    {
        if (UtilsHelperClass.is_undefined(value) !== true )
        {
            if (UtilsHelperClass.is_object(value) === true || UtilsHelperClass.is_array(value) === true)
                this.analytics = value;
            else throw new Error(this.namespace+" Analytics"+this.msgError[0].string);
        } 
            else throw new Error(this.namespace+" Analytics"+this.msgError.object);
    },
    
    setAds: function(value)
    {
        if (UtilsHelperClass.is_undefined(value) !== true)
        {
            if (UtilsHelperClass.is_object(value) === true)
                this.ads = value;
            else throw new Error(this.namespace+" Ads"+this.msgError[0].string);
        } 
            else throw new Error(this.namespace+" Ads"+this.msgError.object);
    },
    
    setShares: function(value)
    {
        if (UtilsHelperClass.is_undefined(value) !== true)
        {
            if (UtilsHelperClass.is_object(value) === true)
                this.shares = value;
            else throw new Error(this.namespace+" Shares"+this.msgError[0].string);
        } 
            else throw new Error(this.namespace+" Shares"+this.msgError.object);
    },
    
    setTeasing: function(value)
    {
        if (UtilsHelperClass.is_undefined(value) !== true)
        {
            if (UtilsHelperClass.is_object(value) === true)
                this.teasing = value;
            else throw new Error(this.namespace+" Teasing"+this.msgError[0].string);
        } 
            else throw new Error(this.namespace+" Teasing"+this.msgError.object);
    },

    setPremium: function(value)
    {
        if (UtilsHelperClass.is_undefined(value) !== true)
        {
            if (UtilsHelperClass.is_object(value) === true)
                this.premium = value;
            else throw new Error(this.namespace+" Premium"+this.msgError[0].string);
        }
            else throw new Error(this.namespace+" Premium"+this.msgError.object);
    },

    setIsPremium: function(value)
    {
        if (UtilsHelperClass.is_undefined(value) !== true)
        {
            if (UtilsHelperClass.is_string(value) === true)
                this.isPremium = value;
            else throw new Error(this.namespace+" IsPremium"+this.msgError[0].string);
        }
            else throw new Error(this.namespace+" IsPremium"+this.msgError.msgUndefined);
    }
}
var OptionsDataClass = function(options)
{
    this.namespace = '/lib/data/';

    this.msgError = {
        'string': ' must be a string',
        'bool': ' must be a boolean',
        'stringLocation': ' must be a string and equal to int or ext',
        'msgUndefined': ' must be defined',
        'array': ' must be a array',
        'object': ' must be a object'
    };

    // id du player, renseigné lors de l'appel du player flash'
    this.idItem = options.id;
    this.idPlayer = null;
    this.autoPlay = options.autoPlay;
    this.posterMode = options.posterMode;
    // url du fichier de configuration
    this.configuration = options.configuration || null;
    this.host = options.host || null;
    this.loop = options.loop || false;
    this.playlistAutoPlay = options.playlistAutoPlay || false;
    this.poster = options.poster || null;
    this.src = options.src || null;
    this.tintColor = options.tintColor || null;
    this.title = options.title || null;
    this.titlePlaylist = options.titlePlaylist || null;
    this.urlTitle = options.urlTitle || null;
    this.useHTML5 = options.useHTML5 || false;
    this.width = options.width || null;
    this.height = options.height || null;
    this.displayYear = options.displayYear || false;
    this.displayTitleBar = options.displayTitleBar || false;
    this.minimumFlashPlayerVersion = options.minimumFlashPlayerVersion || null;
    this.expressInstallSwfUrl = options.expressInstallSwfUrl || null;
    this.site = options.site || null;
    this.userProfile = null;
    this.noPurchase = (options.noPurchase == 1) || false;

    //force ces options
    this.javascriptControls = true;
    this.playButtonOverlay = true;
    this.disabledControls = true;
    this.controlBarMode = "none";
}

OptionsDataClass.prototype = {
    /**
     * set des options avec d'autres parametres.
     * @param option array tableau des options
     * @param configuration object object de la classe ConfigurationDataClass
     */
    mergeOptions: function(configuration)
    {
        if (!configuration instanceof ConfigurationDataClass)
            throw new Error(this.namespace + ": configuration is not a instance of ConfigurationDataClass");

        if (UtilsHelperClass.is_set(configuration.getSrc()))
            this.setSrc(configuration.getSrc());

        if (UtilsHelperClass.is_set(configuration.getWidth()))
            this.setWidth(configuration.getWidth());

        if (UtilsHelperClass.is_set(configuration.getHeight()))
            this.setHeight(configuration.getHeight());

        if (UtilsHelperClass.is_set(configuration.getLocation()))
            this.setLocation(configuration.getLocation());

        if (UtilsHelperClass.is_set(configuration.getLoop()))
            this.setLoop(configuration.getLoop());

        if (UtilsHelperClass.is_set(configuration.getAutoplay()))
            this.setAutoplay(configuration.getAutoplay());

        if (UtilsHelperClass.is_set(configuration.getPoster()))
            this.setPoster(configuration.getPoster());
			
		if (UtilsHelperClass.is_set(configuration.getPosterMode()))
            this.setPosterMode(configuration.getPosterMode());

//        if (UtilsHelperClass.is_set(configuration.getDisabledControls()))
//            this.setDisabledControls(configuration.getDisabledControls());
//
//        if (UtilsHelperClass.is_set(configuration.getControlBarMode()))
//            this.setControlBarMode(configuration.getControlBarMode());

//        if (UtilsHelperClass.is_set(configuration.getControlBarMode()))
//            this.setControlBarMode(configuration.getControlBarMode());
//
//        if (UtilsHelperClass.is_set(configuration.getJavascriptControls()))
//            this.setJavascriptControls(configuration.getJavascriptControls());
//
//        if (UtilsHelperClass.is_set(configuration.getFavorFlashOverHtml5Video()))
//            this.setFavorFlashOverHtml5Video(configuration.getFavorFlashOverHtml5Video());

//        if (UtilsHelperClass.is_set(configuration.getControlBarAutoHide()))
//            this.setControlBarAutoHide(configuration.getControlBarAutoHide());

        if (UtilsHelperClass.is_set(configuration.getSite()))
            this.setSite(configuration.getSite());

        if (UtilsHelperClass.is_set(configuration.getUserProfile()))
            this.setUserProfile(configuration.getUserProfile());
        
        if (UtilsHelperClass.is_set(configuration.getDisplayTitleBar()))
            this.setDisplayTitleBar(configuration.getDisplayTitleBar());

        if (UtilsHelperClass.is_set(configuration.getDisplayYear()))
            this.setDisplayYear(configuration.getDisplayYear());

        if (UtilsHelperClass.is_set(configuration.getFrequencyCapping()))
            this.setFrequencyCapping(configuration.getFrequencyCapping());

        if (UtilsHelperClass.is_set(configuration.getRel()))
            this.setRel(configuration.getRel());

        if (UtilsHelperClass.is_set(configuration.getCaption()))
            this.setCaption(configuration.getCaption());

        return this;
    },
    /**
     * Retourne les options sous forme d'array (pour le player flash
     */
    getArrayOptionsForFlash: function()
    {
        return {
            "id": this.getIdPlayer(),
            "autoPlay": this.getAutoplay(),
			"posterMode": this.getPosterMode(),
            "host": this.getHost(),
            "poster": this.getPoster(),
            "configuration": this.getConfiguration(),
            "src": this.getSrc(),
            "loop": this.getLoop(),
            "playlistAutoPlay": this.getPlaylistAutoPlay(),
            "tintColor": this.getTintColor(),
            "title": this.getTitle(),
            "minimumFlashPlayerVersion": this.getMinimumFlashPlayerVersion(),
            "expressInstallSwfUrl": this.getExpressInstallSwfUrl(),
            "titlePlaylist": this.getTitlePlaylist(),
            "urlTitle": this.getUrlTitle(),
            "width": this.getWidth(),
            "height": this.getHeight(),
            "site": this.getSite(),
            "controlBarMode": "docked",
            "rel": this.getRel(),
            "caption": this.getCaption(),
            "javascriptCallbackFunction": "$.fn.inaPlayer.triggerHandler"
        };
    },
    getMinimumFlashPlayerVersion: function()
    {
        return this.minimumFlashPlayerVersion;
    },
    getExpressInstallSwfUrl: function()
    {
        return this.expressInstallSwfUrl;
    },
    getSwf: function()
    {
        return this.swf;
    },
    getDisplayTitleBar: function()
    {
        return this.displayTitleBar;
    },
    getDisplayYear: function()
    {
        return this.displayYear;
    },
    getAutoplay: function()
    {
        return this.autoPlay;
    },
	getPosterMode: function()
    {
        return this.posterMode;
    },
    getConfiguration: function()
    {
        return this.configuration;
    },
    getDisabledControls: function()
    {
        return this.disabledControls;
    },
    getHost: function()
    {
        return this.host;
    },
    getLoop: function()
    {
        return this.loop;
    },
    getPlaylistAutoPlay: function()
    {
        return this.playlistAutoPlay;
    },
    getPoster: function()
    {
        return this.poster;
    },
    getSrc: function()
    {
        return this.src;
    },
    getTintColor: function()
    {
        return this.tintColor;
    },
    getTitle: function()
    {
        return this.title;
    },
    getTitlePlaylist: function()
    {
        return this.titlePlaylist;
    },
    getUrlTitle: function()
    {
        return this.urlTitle;
    },
    getUseHTML5: function()
    {
        return this.useHTML5;
    },
    getWidth: function()
    {
        return this.width;
    },
    getHeight: function()
    {
        return this.height;
    },
    getJavascriptControls: function()
    {
        return this.javascriptControls;
    },
    getPlayButtonOverlay: function()
    {
        return this.playButtonOverlay;
    },
    getControlBarMode: function()
    {
        return this.controlBarMode;
    },
    getSite: function()
    {
        return this.site;
    },
    getUserProfile: function()
    {
        return this.userProfile;
    },
    getFrequencyCapping: function()
    {
        return this.frequencyCapping;
    },
    getRel: function()
    {
        return this.rel;
    },
    getCaption: function()
    {
        return this.caption;
    },
    getIdPlayer: function()
    {
        return this.idPlayer;
    },
    // On ne set pas toutes les options
    setUserProfile: function(value)
    {
        if (UtilsHelperClass.is_undefined(value) !== true)
        {
            if (UtilsHelperClass.is_string(value) === true)
                this.userProfile = value;
            else
                throw new Error(this.namespace + " userProfile" + this.msgError[0].string);
        }
        else
            throw new Error(this.namespace + " userProfile" + this.msgError.msgUndefined);
    },
    setDisplayTitleBar: function(value)
    {
        if (UtilsHelperClass.is_undefined(value) !== true)
        {
            if (UtilsHelperClass.is_undefined(value) !== true && UtilsHelperClass.is_bool(value) === true || value.toLowerCase() == 'true' || value.toLowerCase() == 'false')
                this.displayTitleBar = UtilsHelperClass.toBool(value);
            else
                throw new Error(this.namespace + " DisplayTitleBar" + this.msgError[0].bool);
        }
        else
            throw new Error(this.namespace + " DisplayTitleBar" + this.msgError.msgUndefined);
    },
    setUseHTML5: function(value)
    {
        if (UtilsHelperClass.is_undefined(value) !== true)
        {
            if (UtilsHelperClass.is_undefined(value) !== true && UtilsHelperClass.is_bool(value) === true || value.toLowerCase() == 'true' || value.toLowerCase() == 'false')
                this.useHTML5 = UtilsHelperClass.toBool(value);
            else
                throw new Error(this.namespace + " useHTML5" + this.msgError[0].bool);
        }
        else
            throw new Error(this.namespace + " useHTML5" + this.msgError.msgUndefined);
    },
    setDisplayYear: function(value)
    {
        if (UtilsHelperClass.is_undefined(value) !== true)
        {
            if (UtilsHelperClass.is_bool(value) === true || value.toLowerCase() == 'true' || value.toLowerCase() == 'false')
                this.displayYear = UtilsHelperClass.toBool(value);
            else
                throw new Error(this.namespace + " DisplayYear" + this.msgError[0].bool);
        }
        else
            throw new Error(this.namespace + " DisplayYear" + this.msgError.msgUndefined);
    },
    setRel: function(value)
    {
        if (UtilsHelperClass.is_undefined(value) !== true)
        {
            if (UtilsHelperClass.is_bool(value) === true || value.toLowerCase() == 'true' || value.toLowerCase() == 'false')
                this.rel = UtilsHelperClass.toBool(value);
            else
                throw new Error(this.namespace + " rel" + this.msgError[0].number);
        }
        else
            throw new Error(this.namespace + " rel" + this.msgError.msgUndefined);
    },
    setCaption: function(value)
    {
        if (UtilsHelperClass.is_undefined(value) !== true)
        {
            if (value.toLowerCase() == 'true')
                this.caption = true;
            else if ( value.toLowerCase() == 'false')
                this.caption = false;
            else
                throw new Error(this.namespace + " caption" + this.msgError[0].number);
        }
        else
            throw new Error(this.namespace + " caption" + this.msgError.msgUndefined);
    },
    setFrequencyCapping: function(value)
    {
        if (UtilsHelperClass.is_undefined(value) !== true)
        {
            value = parseInt(value);
            if (UtilsHelperClass.is_number(value) === true && value >= 0)
                this.frequencyCapping = value;
            else
                throw new Error(this.namespace + " frequencyCapping" + this.msgError[0].number);
        }
        else
            throw new Error(this.namespace + " frequencyCapping" + this.msgError.msgUndefined);
    },
    setSite: function(value)
    {
        if (UtilsHelperClass.is_undefined(value) !== true)
        {
            if (UtilsHelperClass.is_string(value) === true)
                this.site = value;
            else
                throw new Error(this.namespace + " site" + this.msgError[0].string);
        }
        else
            throw new Error(this.namespace + " site" + this.msgError.msgUndefined);
    },
    setIdPlayer: function(value)
    {
        if (UtilsHelperClass.is_undefined(value) !== true)
        {
            if (UtilsHelperClass.is_string(value) === true)
                this.idPlayer = value;
            else
                throw new Error(this.namespace + " idPlayer" + this.msgError[0].string);
        }
        else
            throw new Error(this.namespace + " idPlayer" + this.msgError.msgUndefined);
    },
    setAutoplay: function(value)
    {
        if (UtilsHelperClass.is_undefined(value) !== true)
        {
            if (UtilsHelperClass.is_undefined(value) !== true && UtilsHelperClass.is_bool(value) === true || value.toLowerCase() == 'true' || value.toLowerCase() == 'false')
                this.autoPlay = UtilsHelperClass.toBool(value);
            else
                throw new Error(this.namespace + " autoPlay" + this.msgError[0].bool);
        }
        else
            throw new Error(this.namespace + " autoPlay" + this.msgError.msgUndefined);
    },
	setPosterMode: function(value)
    {
        if (UtilsHelperClass.is_undefined(value) !== true)
        {
            if (UtilsHelperClass.is_undefined(value) !== true && UtilsHelperClass.is_bool(value) === true || value.toLowerCase() == 'true' || value.toLowerCase() == 'false')
                this.posterMode = UtilsHelperClass.toBool(value);
            else
                throw new Error(this.namespace + " posterMode" + this.msgError[0].bool);
        }
        else
            throw new Error(this.namespace + " posterMode" + this.msgError.msgUndefined);
    },
    setLocation: function(value)
    {
        if (UtilsHelperClass.is_undefined(value) !== true)
        {
            if (UtilsHelperClass.is_string(value) === true && (value == 'int' || value == 'ext'))
                this.location = value;
            else
                throw new Error(this.namespace + " location" + this.msgError[0].stringLocation);
        }
        else
            throw new Error(this.namespace + " location" + this.msgError.msgUndefined);
    },
    setLoop: function(value)
    {
        if (UtilsHelperClass.is_undefined(value) !== true)
        {
            if (UtilsHelperClass.is_undefined(value) !== true && UtilsHelperClass.is_bool(value) === true || value.toLowerCase() == 'true' || value.toLowerCase() == 'false')
                this.loop = UtilsHelperClass.toBool(value);
            else
                throw new Error(this.namespace + " loop" + this.msgError[0].bool);
        }
        else
            throw new Error(this.namespace + " loop" + this.msgError.msgUndefined);
    },
    setPlaylistAutoPlay: function(value)
    {
        if (UtilsHelperClass.is_undefined(value) !== true)
        {
            if (UtilsHelperClass.is_undefined(value) !== true && UtilsHelperClass.is_bool(value) === true || value.toLowerCase() == 'true' || value.toLowerCase() == 'false')
                this.playlistAutoPlay = UtilsHelperClass.toBool(value);
            else
                throw Error(this.namespace + " playlistAutoPlay" + this.msgError[0].bool);
        }
        else
            throw new Error(this.namespace + " playlistAutoPlay" + this.msgError.msgUndefined);

    },
    setPoster: function(value)
    {
        if (UtilsHelperClass.is_undefined(value) !== true)
        {
            if (UtilsHelperClass.is_string(value) === true)
                this.poster = value;
            else
                throw Error(this.namespace + " poster" + this.msgError[0].string);
        }
        else
            throw new Error(this.namespace + " poster" + this.msgError.msgUndefined);
    },
    setSrc: function(value)
    {
        if (UtilsHelperClass.is_undefined(value) !== true)
        {
            if (UtilsHelperClass.is_string(value) === true)
                this.src = value;
            else
                throw Error(this.namespace + " src" + this.msgError[0].string);
        }
        else
            throw new Error(this.namespace + " src" + this.msgError.msgUndefined);
    },
    setTintColor: function(value)
    {
        if (UtilsHelperClass.is_undefined(value) !== true)
        {
            if (UtilsHelperClass.is_string(value) === true)
                this.tintColor = value;
            else
                throw Error(this.namespace + " tintColor" + this.msgError[0].string);
        }
        else
            throw new Error(this.namespace + " tintColor" + this.msgError.msgUndefined);
    },
    setSwf: function(value)
    {
        if (UtilsHelperClass.is_undefined(value) !== true)
        {
            if (UtilsHelperClass.is_string(value) === true)
                this.swf = value;
            else
                throw Error(this.namespace + " swf" + this.msgError[0].string);
        }
        else
            throw new Error(this.namespace + " swf" + this.msgError.msgUndefined);
    },
    setTitle: function(value)
    {
        if (UtilsHelperClass.is_undefined(value) !== true)
        {
            if (UtilsHelperClass.is_string(value) === true)
                this.title = value;
            else
                throw Error(this.namespace + " title" + this.msgError[0].string);
        }
        else
            throw new Error(this.namespace + " title" + this.msgError.msgUndefined);
    },
    setTitlePlaylist: function(value)
    {
        if (UtilsHelperClass.is_undefined(value) !== true)
        {
            if (UtilsHelperClass.is_string(value) === true)
                this.titlePlaylist = value;
            else
                throw Error(this.namespace + " titlePlaylist" + this.msgError[0].string);
        }
        else
            throw new Error(this.namespace + " titlePlaylist" + this.msgError.msgUndefined);
    },
    setUrlTitle: function(value)
    {
        if (UtilsHelperClass.is_undefined(value) !== true)
        {
            if (UtilsHelperClass.is_string(value) === true)
                this.urlTitle = value;
            else
                throw Error(this.namespace + " urlTitle" + this.msgError[0].string);
        }
        else
            throw new Error(this.namespace + " urlTitle" + this.msgError.msgUndefined);
    },
    setWidth: function(value)
    {
        if (UtilsHelperClass.is_undefined(value) !== true)
        {
            value = parseInt(value);
            if (UtilsHelperClass.is_number(value) === true && value > 0)
            {
                var screenWidth = screen.width;
                this.width = (value > screenWidth) ? screenWidth : value;
            }
            else
                throw new Error(this.namespace + " Width" + this.msgError[0].number);
        }
        else
            throw new Error(this.namespace + " Width" + this.msgError.msgUndefined);
    },
    setHeight: function(value)
    {
        if (UtilsHelperClass.is_undefined(value) !== true)
        {
            value = parseInt(value);
            if (UtilsHelperClass.is_number(value) === true && value > 0)
            {
                var screenHeight = screen.height;
                this.height = (value > screenHeight) ? screenHeight : value;
            }
            else
                throw new Error(this.namespace + " Height" + this.msgError[0].number);
        }
        else
            throw new Error(this.namespace + " Height" + this.msgError.msgUndefined);
    },
    hasTitle: function()
    {
        return (this.title != null);
    },
    hasUrlTitle: function()
    {
        return (this.urlTitle != null);
    },
    hasTitlePlaylist: function()
    {
        return (this.titlePlaylist != null);
    }
}
var MrssDataClass = function(urlMrss)
{
    this.namespace = '/lib/data/s';
   
    
    this.msgError = {
        'string'            : ' must be a string',
        'bool'              : ' must be a boolean',
        'stringLocation'    : ' must be a string and equal to int or ext',
        'msgUndefined'      : ' must be defined',
        'array'             : ' must be a array',
        'object'            : ' must be a object'
    };
    
    this.urlMrss = urlMrss;
    
    this.mrss = new Array();
    this.currentNotice = 0;
    this.urlSubtitle = "";
    this.typeMedia = "notice";
}

MrssDataClass.prototype = {
    
    init: function()
    {   
        MrssHelperClass.parseMrss(this);
        
        // cas d'un mrss d'erreur
        if (this.getChannelTitle() === "Error")
        {
            if (UtilsHelperClass.isSimilaires(this.urlMrss))
                console.log(this.getChannelDescription());
            else
                throw new Error(this.getChannelDescription());
        } 
        else 
        {          
            // définie le type selon l'url du mrss(notice/playlist/dossier)
            this.setTypeMedia(UtilsHelperClass.getType(this.urlMrss));
       
            if (UtilsHelperClass.is_undefined(this.getMedia()['subTitle'][0]) !== true)
                this.setSubtitleUrl(this.getMedia()['subTitle'][0]['href']);
        }
    },
    
    getTypeMedia: function()
    {
        if (UtilsHelperClass.is_undefined(this.typeMedia) !== true && (this.typeMedia === 'notice' || this.typeMedia === 'playlist' || this.typeMedia === 'dossier'))
            return this.typeMedia;
        else
            return "notice";
    },
    
    getUrlMrss: function()
    {
        return this.urlMrss;
    },

    getMrss: function()
    {
        if (UtilsHelperClass.is_undefined(this.mrss) !== true)
        {
            return this.mrss;
        }
        else
        {
            var config = new ina.player.Config();
            throw new Error(config.getMsgError('MRSS_FILE_ERROR'));
        }
    },
    
    getMedia: function(index)
    {
        if (UtilsHelperClass.is_undefined(index) === true)
            index = this.getIndexCurrentNotice();

        return this.getItem(index)['media'];
    },
    
    getMediaFileExtension: function(index)
    {
        if (UtilsHelperClass.is_undefined(index) === true)
            index = this.getIndexCurrentNotice();
        
        var re = new RegExp("(mp[3-4])$", "g");
        var url = this.getMediaFile(index);
        var typeFile = url.match(re);
        
        return typeFile[0];
    },
    
    getItems: function()
    {
        return this.getChannel()['item'];
    },
    
    getItem: function(index)
    {
        if (UtilsHelperClass.is_undefined(index) === true)
            index = this.getIndexCurrentNotice();
        
        if (index > this.getNbItems())
            index = this.getNbItems();
        
        return this.getChannel()['item'][index];
    },
    
    getChannel: function()
    {
        return this.mrss['channel'];
    },
    
    getChannelTitle: function()
    {
        return this.getChannel()['title'];
    },
    
    getChannelCategory: function()
    {
        return this.getChannel()['category'];
    },
    
    getChannelDescription: function()
    {
        return this.getChannel()['description'];
    },
    
    getIndexCurrentNotice: function()
    {
        return parseInt(this.currentNotice);
    },
    
    getIndexNextNotice: function()
    {
        var next = this.getIndexCurrentNotice() + 1;        
        return parseInt(next);
    },
    
    getIndexPrevNotice: function()
    {
        var prev = this.getIndexCurrentNotice() - 1;
        
        if (prev < 0)
            prev = 0;
        
        return parseInt(prev);
    },
    
    getCurrentNotice: function()
    {
        return this.mrss;
    },
    
    getPrice: function(index)
    {
        if (UtilsHelperClass.is_undefined(index) === true)
            index = this.getIndexCurrentNotice();
        
        return this.getMedia(index)['price']['price'];
    },
    
    getPoster: function(index)
    {
        if (UtilsHelperClass.is_undefined(index) === true)
            index = this.getIndexCurrentNotice();
        
        return this.getMedia(index)['thumbnail'][1]['url'];
    },
    
    getDuration: function(index)
    {
        if (UtilsHelperClass.is_undefined(index) === true)
            index = this.getIndexCurrentNotice();
        
        return this.getMedia(index)['duration'];
    },
    
    getMedium: function(index)
    {
        if (UtilsHelperClass.is_undefined(index) === true)
            index = this.getIndexCurrentNotice();
        
        return this.getMedia(index)['medium'];
    },
    
    getSmallPoster: function(index)
    {
        if (UtilsHelperClass.is_undefined(index) === true)
            index = this.getIndexCurrentNotice();
        
        return this.getMedia(index)['thumbnail'][0]['url'];
    },
    
    getMediaFile: function(index)
    {
        if (UtilsHelperClass.is_undefined(index) === true)
            index = this.getIndexCurrentNotice();
        
        return this.getMedia(index)['url'];
    },
    
    getTitle: function(index)
    {
        if (UtilsHelperClass.is_undefined(index) === true)
            index = this.getIndexCurrentNotice();
        
        return this.getItem(index)['title'];
    },
    
    getCategory: function(index)
    {
        if (UtilsHelperClass.is_undefined(index) === true)
            index = this.getIndexCurrentNotice();
        
        return this.getItem(index)['category'];
    },
    
    getCategoryDefault: function(index)
    {
        if (UtilsHelperClass.is_undefined(index) === true)
            index = this.getIndexCurrentNotice();

        return this.getCategory(index)['default'];
    },
    
    getDescription: function(index)
    {
        if (UtilsHelperClass.is_undefined(index) === true)
            index = this.getIndexCurrentNotice();
        
        return this.getItem(index)['description'];
    },
    
    getPubDate: function(index)
    {
        if (UtilsHelperClass.is_undefined(index) === true)
            index = this.getIndexCurrentNotice();
        
        return this.getItem(index)['pubDate'];
    },
    
    getLink: function(index)
    {
        if (UtilsHelperClass.is_undefined(index) === true)
            index = this.getIndexCurrentNotice();
        
        return this.getItem(index)['link'];
    },
    
    getNoticeId: function(index)
    {
        if (UtilsHelperClass.is_undefined(index) === true)
            index = this.getIndexCurrentNotice();
        
        return this.getItem(index)['guid'];
    },
    
    getUrlNoticeBoutique: function()
    {
        return this.getMedia()['linkBoutique'];
    },
    
    getSubtitleUrl: function()
    {
        return this.urlSubtitle;
    },
    
    getNbItems: function()
    {
        var items = this.getItems();
        return parseInt(items.length - 1);
    },
    
    getRestriction: function()
    {
        return this.getMedia()['restriction'];
    },
    
    getIsTeaser: function()
    {
        if (UtilsHelperClass.is_undefined(this.getItem()['isTeaser']) !== true)
            return this.getItem()['isTeaser'];
        else
            return 0;
    },
    
    getIsSvod: function()
    {
        if (UtilsHelperClass.is_undefined(this.getItem()['isSvod']) !== true)
            return this.getItem()['isSvod'];
        else
            return 0;
    },

    getIsPremium: function()
    {
        if (UtilsHelperClass.is_undefined(this.getItem()['isPremium']) !== true)
            return this.getItem()['isPremium'];
        else
            return 0;
    },
    
    setTypeMedia: function(value)
    {
        if (UtilsHelperClass.is_undefined(value) !== true)
        {
            if (UtilsHelperClass.is_string(value) === true && (value.toLowerCase() === 'pack'))
                this.typeMedia = 'playlist';
            else if (UtilsHelperClass.is_string(value) === true && (value.toLowerCase() === 'notice' || value.toLowerCase() === 'playlist' || value.toLowerCase() === 'dossier'))
                this.typeMedia = value;
            else throw new Error(this.namespace+" TypeMedia"+this.msgError[0].string);
        } 
            else throw new Error(this.namespace+" TypeMedia"+this.msgError.msgUndefined); 
    },
    
    setIndexCurrentNotice: function(index)
    {
        if (UtilsHelperClass.is_undefined(index) !== true)
        {
            index = parseInt(index);
            if (UtilsHelperClass.is_number(index) === true && index >= 0)
                this.currentNotice = index;
            else throw new Error(this.namespace+" frequencyCapping"+this.msgError[0].number);
        } 
            else throw new Error(this.namespace+" frequencyCapping"+this.msgError.msgUndefined);
    },
    
    setMrss: function(value)
    {
        this.mrss = value;
    },
    
    setUrlMrss: function(value)
    {
        this.urlMrss = value;
    },
    
    setSubtitleUrl: function(value)
    {
        this.urlSubtitle = value;
    }
}
function playerActionsClass(mediaObject)
{
    this.namespace = '/lib/actions/';
    
    if (!mediaObject.configurations instanceof ConfigurationDataClass)
            throw new Error(this.namespace+": configurations is not a instance of ConfigurationDataClass");
        
    if (!mediaObject.mrss instanceof MrssDataClass)
        throw new Error(this.namespace+": mrss is not a instance of MrssDataClass");
        
    if (!mediaObject.options instanceof OptionsDataClass)
            throw new Error(this.namespace+": options is not a instance of OptionsDataClass");
        
    if (!mediaObject.configurationHTML5 instanceof ina.player.Config)
            throw new Error(this.namespace+": configuration is not a instance of ina.player.Config");
    
    this.mediaObject = mediaObject;
    this.configurations = this.mediaObject.configurations;
    
    this.listOfSitesRestriction = new Array();
    this.listOfRulesRestriction = new Array();
    this.listOfMediaRestriction = new Array();
    this.listOfUserRestriction = new Array();
    
    this.initPlayerRules();
}

playerActionsClass.prototype = {
    getLinkUrlNotice: function(event)
    {
        window.open(event.data.mrss.getLink(), 'newtab');
    },

    getLinkUrlNoticeBoutique: function(event)
    {
        window.open(event.data.mrss.getUrlNoticeBoutique(), 'newtab');
    },
    
    initPlayerRules:function()
    {
        //For ads
        this.listOfSitesRestriction["VISIO"]=0x1;
        this.listOfSitesRestriction["BOUTIQUE"]=0x2;
        this.listOfSitesRestriction["EXPORT"]=0x4;

        this.listOfRulesRestriction["VISIO"]=0x1;
        this.listOfRulesRestriction["BOUTIQUE"]=0x2;
        this.listOfRulesRestriction["VISIO/BOUTIQUE"]=0x3;
        this.listOfRulesRestriction["OUI"]=0x7;
        this.listOfRulesRestriction["NON"]=0x0;	
        //For Media		
        this.listOfMediaRestriction[ "NONE" ] = 0x1;
        this.listOfMediaRestriction[ "PARTNER" ] = 0x3;
        this.listOfMediaRestriction[ "ALL" ] = 0x7;

        this.listOfUserRestriction[ "INA" ] = 0x1;
        this.listOfUserRestriction[ "PARTNER" ] = 0x2;			
        this.listOfUserRestriction[ "USER" ] = 0x4;
    },
    
    /**
     * Méthode vérifier si la notice est embedable
     * @media siteRestriction restriction (VISIO/BOUTIQUE/EXPORT)
     * @user ruleRestriction restriction (VISIO/BOUTIQUE/VISIO/BOUTIQUE/OUI/NON)
     * @return  Boolean
     */
    isMediaAllowToAds:function( siteRestriction, ruleRestriction )
    {	
        if (this.listOfSitesRestriction[ siteRestriction ] & this.listOfRulesRestriction[ ruleRestriction ])
            return true;

        return false;
    },
		
    /**
     * Méthode vérifier si la notice est embedable
     * @media mediaRestriction restriction (NONE/PARTNER/ALL)
     * @user userRestriction restriction (USER/PARTNER/INA)
     * @return  Boolean
     */
    isMediaAllowToEmbed:function( mediaRestriction, userRestriction )
    {	
        userRestriction = userRestriction.replace(/(_\d*)/,"");
        if ( this.listOfMediaRestriction[ mediaRestriction ] & this.listOfUserRestriction[ userRestriction ])
            return true;

        return false;
    },
    
    getCappingIndex: function()
    {
        var frequencyCapping = this.configurations.getFrequencyCapping();
        try
        {
            if(localStorage)
            {
                if(typeof localStorage["fr.ina.player.fc"] != "undefined")
                {
                     if(localStorage["fr.ina.player.fc"] < frequencyCapping )
                    {					
                            localStorage["fr.ina.player.fc"]++;
                    }
                    else
                    {
                            localStorage["fr.ina.player.fc"] = 0;
                    }
                }
                else
                {
                    localStorage["fr.ina.player.fc"] = 0;
                }
                return localStorage["fr.ina.player.fc"];
            }
            else
            {
                return 0;
            }

        }
        catch (e) 
        {
        }
        return 0;
    },
    
    getRestrictionInfo: function()
    {
        var restriction = this.mediaObject.mrss.getRestriction();

        for (var rule in restriction )
        {
                if(restriction[rule].type=="ads")
                {
                        this.mediaObject.adsRules = restriction[rule].value;
                }
                if(restriction[rule].type=="sharing")
                {
                        this.mediaObject.mediaRules = restriction[rule].value;
                }
                if(restriction[rule].type=="social_sharing")
                {
                        this.mediaObject.socialSharingRules = restriction[rule].relationship;
                }
                if(restriction[rule].type=="warning")
                {
                    if (restriction[rule].relationship == "allow")
                        this.mediaObject.warningRules = restriction[rule].value;
                }
        }
    }
}


var UtilsHelperClass = function(){};


/**
 * Verifie si la valeur entrée est un string
 */
UtilsHelperClass.is_string = function (input)
{
    return (typeof(input)=='string');
}

/**
 * Verifie si la valeur entrée est un bool
 */
UtilsHelperClass.is_bool = function (input)
{
    return (typeof(input)=='boolean');
}

/**
 * Verifie si la valeur entrée est un number
 */
UtilsHelperClass.is_number = function (input)
{
    return (typeof(input)=='number');
}

/**
 * Verifie si la valeur entrée est un function
 */
UtilsHelperClass.is_function = function (input)
{
    return (typeof(input)=='function');
}

/**
 * Verifie si la valeur entrée est un object
 */
//UtilsHelperClass.is_object = function (input)
//{
//    return (typeof(input)=='object');
//}

/**
 * Verifie si la valeur entrée est un undefined
 */
UtilsHelperClass.is_undefined = function (input)
{
    return (typeof(input)=='undefined');
}

UtilsHelperClass.is_empty = function (input)
{
    return (input == '' || input == null || input === false || typeof(input) == 'undefined') ? true : false;
}

UtilsHelperClass.is_set = function (input)
{
    return (input != null && (UtilsHelperClass.is_empty_object(input) === false && input.length > 0) ) ? true : false;
}

/**
 * Verifie si la valeur entrée est un array
 */
UtilsHelperClass.is_array = function (input)
{
    return (Object.prototype.toString.call(input) === "[object Array]");
}

/**
 * Verifie si la valeur entrée est un object
 */
UtilsHelperClass.is_object = function (input)
{
    return (Object.prototype.toString.call(input) === "[object Object]");
}

UtilsHelperClass.is_empty_object = function (input)
{
    if (UtilsHelperClass.is_string(input)) 
    {
        return (input.length === 0);
    }
    else
    {
        return (jQuery.isEmptyObject(input));
    }
}

UtilsHelperClass.isFileInDomain = function(file, domain)
{
    var result = false;
    if (file.indexOf(domain) != -1)
        result = true;

    return result;
}

/**
 * indique si l'url est une url de mrss de notice similaires
 * @param url string
 * @return bool
 */
UtilsHelperClass.isSimilaires = function(url)
{
    var result = false;

    if (url.indexOf('similaire') != -1)
        result = true;

    return result;
}

/**
 * indique si le media est de type playlist
 * on se base sur l'url du mrss pour le determiner
 * @param url string
 * @return bool
 */
UtilsHelperClass.isPlaylist = function(url)
{
    var result = false;

    if (url.indexOf('playlist') != -1)
        result = true;

    return result;
}

/**
 * indique si le media est de type dossier
 * on se base sur l'url du mrss pour le determiner
 * @param url string
 * @return bool
 */
UtilsHelperClass.isDossier = function(url)
{
    var result = false;

    if (url.indexOf('dossier') != -1)
        result = true;

    return result;
}

/**
 * indique si le media est de type notice
 * on se base sur l'url du mrss pour le determiner
 * @param url string
 * @return bool
 */
UtilsHelperClass.isNotice = function(url)
{
    var result = false;

    if (url.indexOf('notice') != -1)
        result = true;

    return result;
}

/**
 * indique si le media est de type pack
 * on se base sur l'url du mrss pour le determiner
 * @param url string
 * @return bool
 */
UtilsHelperClass.isPack = function(url)
{
    var result = false;

    if (url.indexOf('pack') != -1)
        result = true;

    return result;
}

/**
 * indique le type du media
 * @param url string
 * @return string
 */
UtilsHelperClass.getType = function(url)
{
    if (this.isNotice(url) == true)
        return 'notice';
    else if (this.isPlaylist(url) == true)
        return 'playlist';
    else if (this.isDossier(url) == true)
        return 'dossier';
    else if (this.isPack(url) == true)
        return 'playlist';
    else return undefined;
}

// Detect si le navigateur est compatible HTML5
UtilsHelperClass.hasHTML5VideoCapability = function()
{
    return !!document.createElement('video').canPlayType;
}

// Detect si la version de flash est la bonne 
UtilsHelperClass.hasFlashPlayerCapability = function()
{
    var flashPlayerVersion = swfobject.getFlashPlayerVersion();
    return flashPlayerVersion.major >= 10;
}

UtilsHelperClass.toBool = function(value)
{
	return (value == true || value == 1);
}


UtilsHelperClass.htmlDecode = function(input){
    var e = document.createElement('div');
    e.innerHTML = input;
    return e.childNodes.length === 0 ? "" : e.childNodes[0].nodeValue;
}
var XmlHelperClass = function() {
};

/**
 * parser du xml de fichier configuration
 * @param configuration object instance de la classe ConfigurationDataClass
 * @param params object
 */
XmlHelperClass.parseXmlConfiguration = function(configuration, params)
{
    if (UtilsHelperClass.is_undefined(configuration) === true)
        throw new Error("XMLHelperClass: configuration is not defined");

    if (UtilsHelperClass.is_undefined(configuration.urlConfiguration) === true)
        throw new Error("XMLHelperClass: url is not defined");
$.support.cors = true;
    $.ajax({
        type: 'GET',
        url: configuration.urlConfiguration,
        async: false,
        dataType: 'xml',
        crossDomain: true,
        /* ne fonctionne pas sur FF
         xhrFields: {
         withCredentials: true
         },*/
        success:
                function(xml)
                {
                    $("config", xml).each(function() {

                        if (UtilsHelperClass.is_set($(this).find('src')))
                            configuration.setSrc($($(this).find('src').get(0)).text());

                        if (UtilsHelperClass.is_set($(this).find('poster')))
                            configuration.setPoster($($(this).find('poster').get(0)).text());

                        if (UtilsHelperClass.is_set($(this).find('autoPlay')))
                            configuration.setAutoplay($($(this).find('autoPlay').get(0)).text());

                        if (UtilsHelperClass.is_set($(this).find('width')))
                            configuration.setWidth($($(this).find('width').get(0)).text());

                        if (UtilsHelperClass.is_set($(this).find('height')))
                            configuration.setHeight($($(this).find('height').get(0)).text());

                        if (UtilsHelperClass.is_set($(this).find('controlBarMode')))
                            configuration.setControlBarMode($($(this).find('controlBarMode').get(0)).text());

                        if (UtilsHelperClass.is_set($(this).find('autoLoop')))
                            configuration.setAutoLoop($($(this).find('autoLoop').get(0)).text());

                        if (UtilsHelperClass.is_set($(this).find('debug')))
                            configuration.setDebug($($(this).find('debug').get(0)).text());

                        if (UtilsHelperClass.is_set($(this).find('relatedMedia')))
                            configuration.setRelatedMedia($($(this).find('relatedMedia').get(0)).text());

                        if (UtilsHelperClass.is_set($(this).find('location')))
                            configuration.setLocation($($(this).find('location').get(0)).text());

                        if (UtilsHelperClass.is_set($(this).find('site')))
                            configuration.setSite($($(this).find('site').get(0)).text());

                        if (UtilsHelperClass.is_set($(this).find('premium')))
                            configuration.setIsPremium($($(this).find('premium').get(0)).text());
                        
                        if (UtilsHelperClass.is_set($(this).find('jwplayerConfig')))
                        {
                            $(this).find('jwplayerConfig').children().each(function()
                            {
                                configuration.jwpConfig[$(this).get(0).nodeName] = $($(this).get(0)).text();
                            });
                        }
                        
                        if (UtilsHelperClass.is_set($(this).find('jwplayerPlugins')))
                        {
                            $(this).find('jwplayerPlugins').children().each(function()
                            {
                                configuration.jwpPlugins[$(this).get(0).nodeName] = $($(this).get(0)).text();
                            });
                        }
                        
                        if (UtilsHelperClass.is_set($(this).find('jwplayerCastConfig')))
                        {
                            $(this).find('jwplayerCastConfig').children().each(function()
                            {
                                configuration.jwpCastConfig[$(this).get(0).nodeName] = $($(this).get(0)).text();
                            });
                        }

                        if (UtilsHelperClass.is_set($(this).find('codeEmbed')))
                            configuration.setCodeEmbed($($(this).find('codeEmbed').get(0)).text());

                        if (UtilsHelperClass.is_set($(this).find('userProfile')))
                            configuration.setUserProfile($($(this).find('userProfile').get(0)).text());

                        if (UtilsHelperClass.is_set($(this).find('controlBarAutoHide')))
                            configuration.setControlBarAutoHide($($(this).find('controlBarAutoHide').get(0)).text());

                        if (UtilsHelperClass.is_set($(this).find('favorFlashOverHtml5Video')))
                            configuration.setFavorFlashOverHtml5Video($($(this).find('favorFlashOverHtml5Video').get(0)).text());

                        if (UtilsHelperClass.is_set($(this).find('javascriptControls')))
                            configuration.setJavascriptControls($($(this).find('javascriptControls').get(0)).text());

                        if (UtilsHelperClass.is_set($(this).find('displayTitleBar')))
                            configuration.setDisplayTitleBar($($(this).find('displayTitleBar').get(0)).text());

                        if (UtilsHelperClass.is_set($(this).find('displayYear')))
                            configuration.setDisplayYear($($(this).find('displayYear').get(0)).text());
                        
                        if (UtilsHelperClass.is_set($(this).find('displayRelatedMedia')))
                            configuration.setDisplayRelatedMedia($($(this).find('displayRelatedMedia').get(0)).text());

                        if (UtilsHelperClass.is_set($(this).find('displayShare')))
                            configuration.setDisplayShare($($(this).find('displayShare').get(0)).text());

                        if (UtilsHelperClass.is_set($(this).find('fc')))
                            configuration.setFrequencyCapping($($(this).find('fc').get(0)).text());

                        if (UtilsHelperClass.is_set($(this).find('rel')))
                            configuration.setRel($($(this).find('rel').get(0)).text());

                        if (UtilsHelperClass.is_set($(this).find('caption')))
                            configuration.setCaption($($(this).find('caption').get(0)).text());

                        if (UtilsHelperClass.is_empty_object(params) === false && UtilsHelperClass.is_empty_object(params.metadata) === false)
                        {
                            $("metadata", this).each(function()
                            {
                                var id = $(this).attr('id');
                                var xmlConfiguration = {};
                                xmlConfiguration[id] = new Array;
                                switch ($(this).attr('id'))
                                {
                                    case 'fr.ina.player.analytics':
                                        $("analytics", this).each(function()
                                        {
                                            xmlConfiguration[id]['analytics'] = new Array;
                                            $("server", this).each(function()
                                            {
                                                xmlConfiguration[id]['analytics']['server'] = new Array;
                                                $("events", this).each(function()
                                                {
                                                    xmlConfiguration[id]['analytics']['server']['events'] = new Array;
                                                    xmlConfiguration[id]['analytics']['server']['events']['event'] = new Array;
                                                    $("event", this).each(function(index)
                                                    {
                                                        xmlConfiguration[id]['analytics']['server']['events']['event'][index] = new Array;
                                                        if (UtilsHelperClass.is_set($(this)))
                                                            xmlConfiguration[id]['analytics']['server']['events']['event'][index]['name'] = $(this).text();
                                                    });
                                                });

                                                $("connectionArgs", this).each(function()
                                                {
                                                    xmlConfiguration[id]['analytics']['server']['connectionArgs'] = new Array;
                                                    if (UtilsHelperClass.is_set($(this).find('account')))
                                                        xmlConfiguration[id]['analytics']['server']['connectionArgs']['account'] = $(this).find('account').text();
                                                    if (UtilsHelperClass.is_set($(this).find('url')))
                                                        xmlConfiguration[id]['analytics']['server']['connectionArgs']['url'] = $(this).find('url').text();
                                                    if (UtilsHelperClass.is_set($(this).find('timeout')))
                                                        xmlConfiguration[id]['analytics']['server']['connectionArgs']['timeout'] = $(this).find('timeout').text();
                                                    if (UtilsHelperClass.is_set($(this).find('xtsd')))
                                                        xmlConfiguration[id]['analytics']['server']['connectionArgs']['xtsd'] = $(this).find('xtsd').text();
                                                });
                                            });
                                        });
                                        configuration.setAnalytics(xmlConfiguration);
                                        break;
                                    case 'fr.ina.player.ads':
                                        $("ads", this).each(function()
                                        {
                                            xmlConfiguration[id]['ads'] = new Array;
                                            xmlConfiguration[id]['ads']['ad'] = new Array;
                                            $("ad", this).each(function(index)
                                            {
                                                if (UtilsHelperClass.is_set($(this).find('url')) && UtilsHelperClass.is_set($(this).find('type')))
                                                {
                                                    xmlConfiguration[id]['ads']['ad'][index] = new Array;
                                                    xmlConfiguration[id]['ads']['ad'][index]['type'] = $(this).find('type').text();
                                                    xmlConfiguration[id]['ads']['ad'][index]['url'] = $(this).find('url').text();
                                                    xmlConfiguration[id]['ads']['ad'][index]['mobile'] = $(this).find('mobile').text();
                                                    xmlConfiguration[id]['ads']['ad'][index]['format'] = $(this).find('format').text();
                                                }
                                            });
                                        });
                                        configuration.setAds(xmlConfiguration);
                                        break;
                                    case 'fr.ina.player.shares':
                                        $("shares", this).each(function()
                                        {
                                            xmlConfiguration[id]['shares'] = new Array;
                                            xmlConfiguration[id]['shares']['share'] = new Array;
                                            $("share", this).each(function(index)
                                            {
                                                xmlConfiguration[id]['shares']['share'][index] = new Array;
                                                if ($(this).find('name').length != 0)
                                                    xmlConfiguration[id]['shares']['share'][index]['name'] = $(this).find('name').text();
                                                if ($(this).find('title').length != 0)
                                                    xmlConfiguration[id]['shares']['share'][index]['title'] = $(this).find('title').text();
                                                if ($(this).find('event').length != 0)
                                                    xmlConfiguration[id]['shares']['share'][index]['event'] = $(this).find('event').text();
                                                if ($(this).find('image').length != 0)
                                                    xmlConfiguration[id]['shares']['share'][index]['image'] = $(this).find('image').text();
                                                if ($(this).find('link').length != 0)
                                                    xmlConfiguration[id]['shares']['share'][index]['link'] = $(this).find('link').text();
                                                if ($(this).find('action').length != 0)
                                                    xmlConfiguration[id]['shares']['share'][index]['action'] = $(this).find('action').text();
                                            });
                                        });
                                        configuration.setShares(xmlConfiguration);
                                        break;
                                    case 'fr.ina.player.teasing':
                                        xmlConfiguration[id]['teasing'] = new Array;
                                        xmlConfiguration[id]['teasing']['message'] = $("message", this).text();
                                        xmlConfiguration[id]['teasing']['enableclick'] = $("click", this).text();
                                        configuration.setTeasing(xmlConfiguration);
                                        break;
                                    case 'fr.ina.player.premium':
                                        xmlConfiguration[id]['premium'] = new Array;
                                        xmlConfiguration[id]['premium']['delay'] = $("delay", this).text();
                                        xmlConfiguration[id]['premium']['message_video'] = $("message_video", this).text();
                                        xmlConfiguration[id]['premium']['message_video_buy'] = $("message_video_buy", this).text();
                                        xmlConfiguration[id]['premium']['message_audio'] = $("message_audio", this).text();
                                        xmlConfiguration[id]['premium']['message_audio_buy'] = $("message_audio_buy", this).text();
                                        xmlConfiguration[id]['premium']['actions'] = new Array;
                                        $("action", this).each(function(index)
                                        {
                                            var nomBtn = $(this).find('name').text();
                                            xmlConfiguration[id]['premium']['actions'][nomBtn] = new Array;
                                            if ($(this).find('display').length != 0)
                                                xmlConfiguration[id]['premium']['actions'][nomBtn]['display'] = $(this).find('display').text();
                                            if ($(this).find('display_end').length != 0)
                                                xmlConfiguration[id]['premium']['actions'][nomBtn]['display_end'] = $(this).find('display_end').text();
                                            if ($(this).find('label').length != 0)
                                                xmlConfiguration[id]['premium']['actions'][nomBtn]['label'] = $(this).find('label').text();
                                            if ($(this).find('event').length != 0)
                                                xmlConfiguration[id]['premium']['actions'][nomBtn]['event'] = $(this).find('event').text();
                                            if ($(this).find('link').length != 0)
                                                xmlConfiguration[id]['premium']['actions'][nomBtn]['link'] = $(this).find('link').text();
                                            if ($(this).find('price').length != 0)
                                                xmlConfiguration[id]['premium']['actions'][nomBtn]['price'] = $(this).find('price').text();
                                        });
                                        //xmlConfiguration[id]['premium']['passprice'] = $("passprice", this).text();
                                        configuration.setPremium(xmlConfiguration);
                                        break;
                                    case 'http://www.realeyes.com/osmf/plugins/tracking/google':
                                        var confGoogleAnalytics = new Array;
                                        try {
                                            $($("param", this)).each(function(index, element) {
                                                confGoogleAnalytics[element.attributes.name.nodeValue] = element.attributes.value.nodeValue;
                                            });
                                        }
                                        catch (e)
                                        {

                                        }
                                        configuration.setAnalytics(confGoogleAnalytics);
                                        break;
                                }
                            });
                        }
                    });
                },
        error: function(jqXHR, textStatus, errorThrown)
        {
            var configurationHTML5 = new ina.player.Config();
            throw new Error(configurationHTML5.getMsgError('CONFIG_FILE_ERROR'));
        }
    });
}
var MrssHelperClass = function(){};

/**
* parser du xml de fichier configuration
* @param MrssData object instance de la classe MrssDataClass
*/
MrssHelperClass.parseMrss = function (MrssData)
{
	if (!MrssData instanceof MrssDataClass)
        throw new Error("MrssHelperClass: MrssData is not a instance of MrssDataClass");
	
   if (UtilsHelperClass.is_undefined(MrssData.getUrlMrss()) === true)
       throw new Error("MrssHelperClass: url is not defined");
   
   if (UtilsHelperClass.is_undefined(MrssData) === true)
       throw new Error("MrssHelperClass: MrssData is not defined");
   
   $.ajax({
        type: 'GET',
        url: MrssData.getUrlMrss(),
        async: false,
        dataType: 'xml',
        crossDomain: true,
        /* ne fonctionne pas sur FF
		 xhrFields:  {
                        withCredentials: true
                    },*/
        success : 
        function(mrss) 
        {
                var config = new ina.player.Config();
                $(mrss).find("channel").each(function() {
                        var mrss = new Array;
                        mrss['channel'] = new Array;

                        if ($(this).find('title').length != 0)
                                mrss['channel']['title'] = $(this).find('title')[0].textContent;

                        if ($(this).find('description').length != 0)
                                mrss['channel']['description'] = $(this).find('description')[0].textContent;

                        if ($(this).find('link').length != 0)
                                mrss['channel']['link'] = $(this).find('link')[0].textContent;

                        if ($(this).find('pubDate').length != 0)
                                mrss['channel']['pubDate'] = $(this).find('pubDate')[0].textContent;

                        if ($(this).find('category').length != 0)
                                mrss['channel']['category'] = $(this).find('category')[0].textContent;

                        mrss['channel']['item'] = new Array;
                        $(this).find("item").each(function(i)
                        {
                                mrss['channel']['item'][i] = new Array;
                                mrss['channel']['item'][i]['guid'] = $(this).find('guid').text() || "";
                                mrss['channel']['item'][i]['title'] = $(this).find('title').text() || "";
                                mrss['channel']['item'][i]['description'] = $(this).find('description').text() || "";
                                mrss['channel']['item'][i]['link'] = $(this).find('link').text() || "";
                                mrss['channel']['item'][i]['pubDate'] = $(this).find('pubDate').text() || "";

                                mrss['channel']['item'][i]['category'] = new Array;
                                $(this).find('category').each(function()
                                {                                                  
                                    if ($(this).attr('domain') != undefined)
                                        mrss['channel']['item'][i]['category'][$(this).attr('domain')] = $(this).text() || '';
                                    else
                                        mrss['channel']['item'][i]['category']['default'] = $(this).text();
                                });

                                var item = this;

                                $(this).find("category, category").each(function()
                                {
                                        //la notice est un teasing ?
                                        if ($(this).attr('domain') && $(this).attr('domain') == config.module.teasing)
                                        {
                                                mrss['channel']['item'][i]['isTeaser'] = $(this).text();
                                        }
                                        //la notice est un premium ?
                                        if ($(this).attr('domain') && $(this).attr('domain') == config.module.premium)
                                        {
                                                mrss['channel']['item'][i]['isPremium'] = $(this).text();
                                        }
                                        //quel est le ressenti de la notice pour la svod ?
                                        if ($(this).attr('domain') && $(this).attr('domain') == config.module.svod)
                                        {
                                                mrss['channel']['item'][i]['isSvod'] = $(this).text();
                                        }
                                });

                                $(this).find("media\\:content, content").each(function()
                                {

                                        mrss['channel']['item'][i]['media'] = new Array;
                                        mrss['channel']['item'][i]['media']['url'] = $(this).attr('url') || "";
                                        mrss['channel']['item'][i]['media']['duration'] = $(this).attr('duration') || "";
                                        mrss['channel']['item'][i]['media']['medium'] = $(this).attr('medium') || "";

                                        mrss['channel']['item'][i]['media']['player'] = new Array;
                                        mrss['channel']['item'][i]['media']['player']['url'] = $(this).find('player').attr('url') || "";
                                        mrss['channel']['item'][i]['media']['player']['height'] = $(this).find('player').attr('height') || "";
                                        mrss['channel']['item'][i]['media']['player']['width'] = $(this).find('player').attr('width') || "";

                                        y = 0;

                                        mrss['channel']['item'][i]['media']['price'] = new Array;
                                        $(this).find("media\\:price, price").each(function(y)
                                        {
                                                mrss['channel']['item'][i]['media']['price']['type'] = $(this).attr('type') || "";
                                                mrss['channel']['item'][i]['media']['price']['price'] = $(this).attr('price') || "";

                                                //on chop l'url de la notice en boutique'
                                                if ($(this).attr('type'))
                                                {
                                                        mrss['channel']['item'][i]['media']['linkBoutique'] = $(this).attr('info');
                                                }
                                        });

                                       mrss['channel']['item'][i]['media']['thumbnail'] = new Array;
                                        $(this).find("media\\:thumbnail, thumbnail").each(function(y)
                                        {
                                                mrss['channel']['item'][i]['media']['thumbnail'][y] = new Array;
                                                mrss['channel']['item'][i]['media']['thumbnail'][y]['url'] = $(this).attr('url');
                                                mrss['channel']['item'][i]['media']['thumbnail'][y]['height'] = $(this).attr('height');
                                                mrss['channel']['item'][i]['media']['thumbnail'][y]['width'] = $(this).attr('width');
                                                y++;
                                        });

                                        var subtitle = mrss['channel']['item'][i]['media']['subTitle']= new Array();
                                        $(this).find("media\\:subTitle, subTitle").each(function(k)
                                        {
                                                subtitle[k] = new Array();
                                                subtitle[k]['type'] = $(this).attr('type');
                                                subtitle[k]['href'] = $(this).attr('href');
                                        });

                                        mrss['channel']['item'][i]['media']['credit'] = new Array;
                                        $(item).find("media\\:credit, credit").each(function()
                                        {
                                                mrss['channel']['item'][i]['media']['credit'][$(this).attr('role')] = new Array;
                                                mrss['channel']['item'][i]['media']['credit'][$(this).attr('type')] = $(this).text();
                                        });

                                        y = 0;
                                        mrss['channel']['item'][i]['media']['restriction'] = new Array;

                                        $(item).find("media\\:restriction, restriction").each(function(y)
                                        {
                                                mrss['channel']['item'][i]['media']['restriction'][y] = new Array;
                                                mrss['channel']['item'][i]['media']['restriction'][y]['type'] = $(this).attr('type');
                                                mrss['channel']['item'][i]['media']['restriction'][y]['relationship'] = $(this).attr('relationship');
                                                mrss['channel']['item'][i]['media']['restriction'][y]['value'] = $(this).text();
                                                y++;
                                        });

                                });
                                i++;
                        });

                        MrssData.setMrss(mrss);
                });
        },
        error: function(jqXHR, textStatus, errorThrown) 
        {
                var config = new ina.player.Config();
                throw new Error(config.getMsgError('MRSS_FILE_ERROR'));
        }
    });
}